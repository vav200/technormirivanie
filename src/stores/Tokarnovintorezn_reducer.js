import React from "react";

const dataTokarnovintorezn = {
  machineModels: {
    "16B16P": {
      characteristics: {
        part_maxL: 750,
        part_maxD_patron: 320,
        part_maxD_centra: 180,
        center_height: 160,
        max_weight_patron: 80,
        max_weight_centra: 260,
      },
    },
    "16K20": {
      characteristics: {
        part_maxL: 1400,
        part_maxD_patron: 400,
        part_maxD_centra: 220,
        center_height: 200,
        max_weight_patron: 300,
        max_weight_centra: 1300,
      },
    },
    "1M63B": {
      characteristics: {
        part_maxL: 2800,
        part_maxD_patron: 700,
        part_maxD_centra: 350,
        center_height: 300,
        max_weight_patron: 400,
        max_weight_centra: 3500,
      },
    },
    "16K40": {
      characteristics: {
        part_maxL: 4000,
        part_maxD_patron: 800,
        part_maxD_centra: 490,
        center_height: 400,
        max_weight_patron: 500,
        max_weight_centra: 4000,
      },
    },
    165: {
      characteristics: {
        part_maxL: 5000,
        part_maxD_patron: 1000,
        part_maxD_centra: 650,
        center_height: 500,
        max_weight_patron: 800,
        max_weight_centra: 8000,
      },
    },
  },
  installRemovalTime: {
    cilindric: {
      samocentrpatron: {
        0: {
          1000: {
            0.5: 0.23,
            1: 0.36,
            3: 0.54,
            5: 0.65,
            10: 0.84,
            20: 1.1,
            30: 4.2,
            50: 4.7,
            100: 5.3,
          },
        },
        0.5: {
          1000: {
            0.5: 0.55,
            1: 0.74,
            3: 0.98,
            5: 1.1,
            10: 1.3,
            20: 1.6,
            30: 4.7,
            50: 5.8,
            100: 7.7,
          },
        },
        0.1: {
          1000: {
            0.5: 1.15,
            1: 1.53,
            3: 2,
            5: 2.15,
            10: 2.65,
            20: 3.15,
            30: 6.1,
            50: 7.5,
            100: 10,
          },
        },
      },
      samocentrpatron_centr: {
        0: {
          1000: {
            0.5: 0.3,
            1: 0.41,
            3: 0.56,
            5: 0.64,
            10: 0.77,
            20: 0.95,
            30: 3.9,
            50: 4.3,
            100: 5,
            200: 5.7,
            400: 7.3,
            800: 8.4,
            1500: 9.5,
            3000: 11,
          },
          2000: {
            0.5: 4.83,
            1: 4.83,
            3: 4.83,
            5: 4.83,
            10: 4.83,
            20: 4.83,
            30: 4.83,
            50: 4.83,
            100: 5.5,
            200: 6.4,
            400: 7.3,
            800: 8.4,
            1500: 9.5,
            3000: 11,
          },
          3000: {
            0.5: 7,
            1: 7,
            3: 7,
            5: 7,
            10: 7,
            20: 7,
            30: 7,
            50: 7,
            100: 7,
            200: 7,
            400: 8.3,
            800: 9.2,
            1500: 10.5,
            3000: 12,
          },
        },
        0.1: {
          1000: {
            0.5: 0.49,
            1: 0.68,
            3: 0.91,
            5: 1.04,
            10: 1.26,
            20: 1.52,
            30: 4.7,
            50: 5.1,
            100: 5.9,
            200: 6.7,
            400: 8.5,
            800: 9.8,
            1500: 11,
            3000: 12.5,
          },
          2000: {
            0.5: 5.7,
            1: 5.7,
            3: 5.7,
            5: 5.7,
            10: 5.7,
            20: 5.7,
            30: 5.7,
            50: 5.7,
            100: 6.5,
            200: 7.4,
            400: 8.5,
            800: 9.8,
            1500: 11,
            3000: 12.5,
          },
          3000: {
            0.5: 8.2,
            1: 8.2,
            3: 8.2,
            5: 8.2,
            10: 8.2,
            20: 8.2,
            30: 8.2,
            50: 8.2,
            100: 8.2,
            200: 8.2,
            400: 9.5,
            800: 11,
            1500: 12.5,
            3000: 14,
          },
        },
        0.05: {
          1000: {
            0.5: 1,
            1: 1.5,
            3: 2,
            5: 2.3,
            10: 2.6,
            20: 3,
            30: 8,
            50: 9,
            100: 10,
            200: 11,
            400: 15,
            800: 19,
            1500: 20,
            3000: 25,
          },
          2000: {
            0.5: 10,
            1: 10,
            3: 10,
            5: 10,
            10: 10,
            20: 10,
            30: 10,
            50: 10,
            100: 11,
            200: 13,
            400: 15,
            800: 19,
            1500: 20,
            3000: 25,
          },
          3000: {
            0.5: 15,
            1: 15,
            3: 15,
            5: 15,
            10: 15,
            20: 15,
            30: 15,
            50: 15,
            100: 15,
            200: 15,
            400: 18,
            800: 20,
            1500: 25,
            3000: 27,
          },
        },
        0.01: {
          1000: {
            0.5: 2,
            1: 2.5,
            3: 3,
            5: 3.3,
            10: 3.6,
            20: 4,
            30: 10,
            50: 11,
            100: 12,
            200: 13,
            400: 17,
            800: 21,
            1500: 22,
            3000: 27,
          },
          2000: {
            0.5: 12,
            1: 12,
            3: 12,
            5: 12,
            10: 12,
            20: 12,
            30: 12,
            50: 12,
            100: 13,
            200: 15,
            400: 17,
            800: 21,
            1500: 22,
            3000: 27,
          },
          3000: {
            0.5: 17,
            1: 17,
            3: 17,
            5: 17,
            10: 17,
            20: 17,
            30: 17,
            50: 17,
            100: 17,
            200: 17,
            400: 21,
            800: 22,
            1500: 27,
            3000: 29,
          },
        },
      },
      samocentrpatron_centr_lunet: {
        0: {
          1000: {
            0.5: 0.8,
            1: 0.8,
            3: 0.9,
            5: 1,
            10: 1.2,
            20: 1.4,
            30: 4.2,
            50: 4.6,
            100: 5.3,
            200: 6.1,
            400: 7.8,
            800: 8.9,
            1500: 10,
            3000: 12,
          },
          2000: {
            0.5: 1.7,
            1: 1.7,
            3: 1.7,
            5: 1.7,
            10: 1.7,
            20: 1.7,
            30: 4.6,
            50: 5.1,
            100: 5.9,
            200: 6.7,
            400: 7.8,
            800: 8.9,
            1500: 10,
            3000: 12,
          },
          3000: {
            0.5: 7.4,
            1: 7.4,
            3: 7.4,
            5: 7.4,
            10: 7.4,
            20: 7.4,
            30: 7.4,
            50: 7.4,
            100: 7.4,
            200: 7.4,
            400: 8.5,
            800: 10,
            1500: 11,
            3000: 13,
          },
        },
        0.1: {
          1000: {
            0.5: 1,
            1: 1,
            3: 1.3,
            5: 1.4,
            10: 1.6,
            20: 1.7,
            30: 4.8,
            50: 5.4,
            100: 6.1,
            200: 7.1,
            400: 8.9,
            800: 11,
            1500: 12,
            3000: 14,
          },
          2000: {
            0.5: 2.2,
            1: 2.2,
            3: 2.2,
            5: 2.2,
            10: 2.2,
            20: 2.2,
            30: 5.3,
            50: 5.9,
            100: 6.8,
            200: 7.8,
            400: 8.9,
            800: 11,
            1500: 12,
            3000: 14,
          },
          3000: {
            0.5: 8.5,
            1: 8.5,
            3: 8.5,
            5: 8.5,
            10: 8.5,
            20: 8.5,
            30: 8.5,
            50: 8.5,
            100: 8.5,
            200: 8.5,
            400: 10,
            800: 12,
            1500: 13,
            3000: 15,
          },
        },
        0.05: {
          1000: {
            0.5: 2,
            1: 2,
            3: 2.5,
            5: 2.8,
            10: 3,
            20: 3.5,
            30: 9.5,
            50: 11,
            100: 12,
            200: 14,
            400: 17,
            800: 20,
            1500: 22,
            3000: 25,
          },
          2000: {
            0.5: 4,
            1: 4,
            3: 4,
            5: 4,
            10: 4,
            20: 4,
            30: 11,
            50: 13,
            100: 14,
            200: 16,
            400: 17,
            800: 20,
            1500: 22,
            3000: 25,
          },
          3000: {
            0.5: 17,
            1: 17,
            3: 17,
            5: 17,
            10: 17,
            20: 17,
            30: 17,
            50: 17,
            100: 17,
            200: 17,
            400: 20,
            800: 22,
            1500: 27,
            3000: 29,
          },
        },
        0.01: {
          1000: {
            0.5: 3,
            1: 3,
            3: 3.5,
            5: 3.8,
            10: 4,
            20: 4.5,
            30: 10.5,
            50: 13,
            100: 14,
            200: 16,
            400: 18,
            800: 21,
            1500: 23,
            3000: 28,
          },
          2000: {
            0.5: 5,
            1: 5,
            3: 5,
            5: 5,
            10: 5,
            20: 5,
            30: 12,
            50: 14,
            100: 15,
            200: 17,
            400: 18,
            800: 21,
            1500: 23,
            3000: 28,
          },
          3000: {
            0.5: 19,
            1: 19,
            3: 19,
            5: 19,
            10: 19,
            20: 19,
            30: 19,
            50: 19,
            100: 19,
            200: 19,
            400: 20,
            800: 23,
            1500: 28,
            3000: 32,
          },
        },
      },
      samocentrpatron_lunet: {
        0: {
          1000: {
            0.5: 0.7,
            1: 0.7,
            3: 0.7,
            5: 0.9,
            10: 1.1,
            20: 1.4,
            30: 3.5,
            50: 3.8,
            100: 4.5,
            200: 6,
            400: 6.9,
            800: 8,
            1500: 9,
            3000: 11,
          },
          2000: {
            0.5: 1.6,
            1: 1.6,
            3: 1.6,
            5: 1.6,
            10: 1.6,
            20: 1.6,
            30: 4,
            50: 4.5,
            100: 5.2,
            200: 6,
            400: 6.9,
            800: 8,
            1500: 9,
            3000: 11,
          },
          3000: {
            0.5: 5.3,
            1: 5.3,
            3: 5.3,
            5: 5.3,
            10: 5.3,
            20: 5.3,
            30: 5.3,
            50: 5.3,
            100: 6,
            200: 7,
            400: 8,
            800: 9.5,
            1500: 11,
            3000: 13,
          },
        },
        0.5: {
          1000: {
            0.5: 1,
            1: 1,
            3: 1,
            5: 1.2,
            10: 1.5,
            20: 1.8,
            30: 4,
            50: 4.5,
            100: 5,
            200: 7,
            400: 8,
            800: 9,
            1500: 11,
            3000: 13,
          },
          2000: {
            0.5: 1.7,
            1: 1.7,
            3: 1.7,
            5: 1.7,
            10: 1.7,
            20: 2,
            30: 4.7,
            50: 5,
            100: 6,
            200: 7,
            400: 8,
            800: 9,
            1500: 11,
            3000: 13,
          },
          3000: {
            0.5: 5.5,
            1: 5.5,
            3: 5.5,
            5: 5.5,
            10: 5.5,
            20: 5.5,
            30: 5.5,
            50: 6,
            100: 7,
            200: 8,
            400: 9.5,
            800: 11,
            1500: 13,
            3000: 15,
          },
        },
        0.1: {
          1000: {
            0.5: 1.1,
            1: 1.1,
            3: 1.1,
            5: 1.4,
            10: 1.7,
            20: 2.1,
            30: 4.6,
            50: 5.1,
            100: 6,
            200: 8,
            400: 9.5,
            800: 11,
            1500: 13,
            3000: 15,
          },
          2000: {
            0.5: 2,
            1: 2,
            3: 2,
            5: 2,
            10: 2,
            20: 2.4,
            30: 5.4,
            50: 6,
            100: 7,
            200: 8,
            400: 9.5,
            800: 11,
            1500: 13,
            3000: 15,
          },
          3000: {
            0.5: 6.5,
            1: 6.5,
            3: 6.5,
            5: 6.5,
            10: 6.5,
            20: 6.5,
            30: 6.5,
            50: 7,
            100: 8,
            200: 9,
            400: 11,
            800: 13,
            1500: 15,
            3000: 17,
          },
        },
        0.05: {
          1000: {
            0.5: 2.1,
            1: 2.1,
            3: 2.1,
            5: 2.4,
            10: 2.7,
            20: 3.1,
            30: 5.6,
            50: 6.1,
            100: 7,
            200: 9,
            400: 11,
            800: 12,
            1500: 14,
            3000: 16,
          },
          2000: {
            0.5: 3,
            1: 3,
            3: 3,
            5: 3,
            10: 3,
            20: 3.4,
            30: 6.4,
            50: 7,
            100: 8,
            200: 9,
            400: 11,
            800: 12,
            1500: 14,
            3000: 16,
          },
          3000: {
            0.5: 7.5,
            1: 7.5,
            3: 7.5,
            5: 7.5,
            10: 7.5,
            20: 7.5,
            30: 7.5,
            50: 8,
            100: 9,
            200: 10,
            400: 12,
            800: 14,
            1500: 16,
            3000: 18,
          },
        },
        0.01: {
          1000: {
            0.5: 4,
            1: 4,
            3: 4,
            5: 4.5,
            10: 4.7,
            20: 5,
            30: 7.6,
            50: 8,
            100: 9,
            200: 11,
            400: 13,
            800: 14,
            1500: 16,
            3000: 18,
          },
          2000: {
            0.5: 5,
            1: 5,
            3: 5,
            5: 5,
            10: 5,
            20: 5.5,
            30: 8.5,
            50: 9,
            100: 10,
            200: 11,
            400: 13,
            800: 14,
            1500: 16,
            3000: 18,
          },
          3000: {
            0.5: 9.5,
            1: 9.5,
            3: 9.5,
            5: 9.5,
            10: 9.5,
            20: 9.5,
            30: 9.5,
            50: 10,
            100: 11,
            200: 13,
            400: 14,
            800: 16,
            1500: 18,
            3000: 20,
          },
        },
      },
      chetirehkulachk: {
        0: {
          1000: {
            3: 0.8,
            5: 0.95,
            10: 1.15,
            20: 1.4,
            30: 4.3,
            50: 4.7,
            100: 5.3,
            200: 5.9,
            400: 6.7,
            800: 7.5,
            1500: 13.5,
            3000: 15,
          },
        },
        1: {
          1000: {
            3: 1.9,
            5: 2.2,
            10: 2.8,
            20: 3.6,
            30: 10,
            50: 11,
            100: 12.5,
            200: 14,
            400: 15.5,
            800: 17,
            1500: 19,
            3000: 21,
          },
        },
        0.5: {
          1000: {
            3: 2.1,
            5: 2.4,
            10: 3.1,
            20: 4,
            30: 10.5,
            50: 12,
            100: 13,
            200: 15,
            400: 17,
            800: 19,
            1500: 21,
            3000: 23,
          },
        },
        0.1: {
          1000: {
            3: 2.5,
            5: 3,
            10: 3.8,
            20: 4.9,
            30: 11,
            50: 12.5,
            100: 14,
            200: 15.5,
            400: 18,
            800: 20,
            1500: 22,
            3000: 26,
          },
        },
        0.05: {
          1000: {
            3: 3,
            5: 3.6,
            10: 4.6,
            20: 5.8,
            30: 13,
            50: 14.5,
            100: 16.5,
            200: 18,
            400: 21,
            800: 24,
            1500: 26,
            3000: 30,
          },
        },
        0.01: {
          1000: {
            3: 3.6,
            5: 4.3,
            10: 5.5,
            20: 7,
            30: 15.5,
            50: 17.5,
            100: 20,
            200: 22,
            400: 25,
            800: 29,
            1500: 31,
            3000: 36,
          },
        },
      },
      chetirehkulachk_centr: {
        0: {
          1000: {
            3: 1,
            5: 1.2,
            10: 1.5,
            20: 1.8,
            30: 5,
            50: 5.5,
            100: 6.3,
            200: 7.1,
            400: 8.1,
            800: 9.1,
            1500: 13,
            3000: 15,
            5000: 17,
            10000: 20,
          },
          2000: {
            3: 8,
            5: 8,
            10: 8,
            20: 8,
            30: 8,
            50: 8,
            100: 8,
            200: 11,
            400: 13,
            800: 15,
            1500: 16.5,
            3000: 19,
            5000: 21,
            10000: 25,
          },
          3000: {
            3: 8,
            5: 8,
            10: 8,
            20: 8,
            30: 8,
            50: 8,
            100: 8,
            200: 11,
            400: 13,
            800: 15,
            1500: 16.5,
            3000: 19,
            5000: 21,
            10000: 25,
          },
          5000: {
            3: 24,
            5: 24,
            10: 24,
            20: 24,
            30: 24,
            50: 24,
            100: 24,
            200: 24,
            400: 24,
            800: 24,
            1500: 24,
            3000: 24,
            5000: 24,
            10000: 29,
          },
        },
        1: {
          1000: {
            3: 1.3,
            5: 1.5,
            10: 1.9,
            20: 2.3,
            30: 6.6,
            50: 7.3,
            100: 8.2,
            200: 9.3,
            400: 10.5,
            800: 12,
            1500: 16.5,
            3000: 19,
            5000: 21,
            10000: 25,
          },
          2000: {
            3: 10,
            5: 10,
            10: 10,
            20: 10,
            30: 10,
            50: 10,
            100: 10,
            200: 11,
            400: 13,
            800: 15,
            1500: 16.5,
            3000: 19,
            5000: 21,
            10000: 25,
          },
          3000: {
            3: 10,
            5: 10,
            10: 10,
            20: 10,
            30: 10,
            50: 10,
            100: 10,
            200: 11,
            400: 13,
            800: 15,
            1500: 16.5,
            3000: 19,
            5000: 21,
            10000: 25,
          },
          5000: {
            3: 26,
            5: 26,
            10: 26,
            20: 26,
            30: 26,
            50: 26,
            100: 26,
            200: 26,
            400: 26,
            800: 26,
            1500: 26,
            3000: 26,
            5000: 26,
            10000: 32,
          },
        },
        0.5: {
          1000: {
            3: 1.4,
            5: 1.6,
            10: 2.1,
            20: 2.5,
            30: 7.3,
            50: 8,
            100: 9,
            200: 10.5,
            400: 11.5,
            800: 13,
            1500: 18,
            3000: 21,
            5000: 23,
            10000: 27,
          },
          2000: {
            3: 11,
            5: 11,
            10: 11,
            20: 11,
            30: 11,
            50: 11,
            100: 11,
            200: 12.5,
            400: 14,
            800: 16.5,
            1500: 18,
            3000: 21,
            5000: 23,
            10000: 27,
          },
          3000: {
            3: 11,
            5: 11,
            10: 11,
            20: 11,
            30: 11,
            50: 11,
            100: 11,
            200: 12.5,
            400: 14,
            800: 16.5,
            1500: 18,
            3000: 21,
            5000: 23,
            10000: 27,
          },
          5000: {
            3: 34,
            5: 34,
            10: 34,
            20: 34,
            30: 34,
            50: 34,
            100: 34,
            200: 34,
            400: 34,
            800: 34,
            1500: 34,
            3000: 34,
            5000: 34,
            10000: 40,
          },
        },
        0.1: {
          1000: {
            3: 1.6,
            5: 1.9,
            10: 2.4,
            20: 3,
            30: 9.4,
            50: 10,
            100: 9,
            200: 11.5,
            400: 13,
            800: 15.5,
            1500: 17,
            3000: 26,
            5000: 29,
            10000: 35,
          },
          2000: {
            3: 14.5,
            5: 14.5,
            10: 14.5,
            20: 14.5,
            30: 14.5,
            50: 14.5,
            100: 14.5,
            200: 16.5,
            400: 19,
            800: 21,
            1500: 23,
            3000: 26,
            5000: 29,
            10000: 35,
          },
          3000: {
            3: 14.5,
            5: 14.5,
            10: 14.5,
            20: 14.5,
            30: 14.5,
            50: 14.5,
            100: 14.5,
            200: 16.5,
            400: 19,
            800: 21,
            1500: 23,
            3000: 26,
            5000: 29,
            10000: 35,
          },
          5000: {
            3: 34,
            5: 34,
            10: 34,
            20: 34,
            30: 34,
            50: 34,
            100: 34,
            200: 34,
            400: 34,
            800: 34,
            1500: 34,
            3000: 34,
            5000: 34,
            10000: 40,
          },
        },
        0.05: {
          1000: {
            3: 2,
            5: 2.3,
            10: 2.9,
            20: 3.6,
            30: 11,
            50: 12,
            100: 13.7,
            200: 15.5,
            400: 18,
            800: 20,
            1500: 27,
            3000: 31,
            5000: 34,
            10000: 41,
          },
          2000: {
            3: 17,
            5: 17,
            10: 17,
            20: 17,
            30: 17,
            50: 17,
            100: 17,
            200: 19.5,
            400: 22,
            800: 25,
            1500: 27,
            3000: 31,
            5000: 34,
            10000: 41,
          },
          3000: {
            3: 17,
            5: 17,
            10: 17,
            20: 17,
            30: 17,
            50: 17,
            100: 17,
            200: 19.5,
            400: 22,
            800: 25,
            1500: 27,
            3000: 31,
            5000: 34,
            10000: 41,
          },
          5000: {
            3: 19,
            5: 19,
            10: 19,
            20: 19,
            30: 19,
            50: 19,
            100: 19,
            200: 19,
            400: 29,
            800: 29,
            1500: 29,
            3000: 39,
            5000: 39,
            10000: 47,
          },
        },
        0.01: {
          1000: {
            3: 2.4,
            5: 2.8,
            10: 3.5,
            20: 4.3,
            30: 13,
            50: 14.5,
            100: 16.5,
            200: 18.5,
            400: 21.5,
            800: 24,
            1500: 32,
            3000: 37,
            5000: 41,
            10000: 49,
          },
          2000: {
            3: 20,
            5: 20,
            10: 20,
            20: 20,
            30: 20,
            50: 20,
            100: 20,
            200: 23,
            400: 26,
            800: 30,
            1500: 32,
            3000: 37,
            5000: 41,
            10000: 49,
          },
          3000: {
            3: 20,
            5: 20,
            10: 20,
            20: 20,
            30: 20,
            50: 20,
            100: 20,
            200: 23,
            400: 26,
            800: 30,
            1500: 32,
            3000: 37,
            5000: 41,
            10000: 49,
          },
          5000: {
            3: 47,
            5: 47,
            10: 47,
            20: 47,
            30: 47,
            50: 47,
            100: 47,
            200: 47,
            400: 47,
            800: 47,
            1500: 47,
            3000: 47,
            5000: 47,
            10000: 56,
          },
        },
      },
      chetirehkulachk_centr_lunet: {
        0: {
          1000: {
            3: 9.6,
            5: 9.6,
            10: 9.6,
            20: 9.6,
            30: 9.6,
            50: 9.6,
            100: 9.6,
            200: 11,
            400: 12.5,
            800: 14,
            1500: 15.5,
            3000: 18,
            5000: 20,
            10000: 24,
          },
          2000: {
            3: 9.6,
            5: 9.6,
            10: 9.6,
            20: 9.6,
            30: 9.6,
            50: 9.6,
            100: 9.6,
            200: 11,
            400: 12.5,
            800: 14,
            1500: 15.5,
            3000: 18,
            5000: 20,
            10000: 24,
          },
          3000: {
            3: 9.6,
            5: 9.6,
            10: 9.6,
            20: 9.6,
            30: 9.6,
            50: 9.6,
            100: 9.6,
            200: 11,
            400: 12.5,
            800: 14,
            1500: 15.5,
            3000: 18,
            5000: 20,
            10000: 24,
          },
          5000: {
            3: 23,
            5: 23,
            10: 23,
            20: 23,
            30: 23,
            50: 23,
            100: 23,
            200: 23,
            400: 23,
            800: 23,
            1500: 23,
            3000: 23,
            5000: 23,
            10000: 26,
          },
        },
        1: {
          1000: {
            3: 12,
            5: 12,
            10: 12,
            20: 12,
            30: 12,
            50: 12,
            100: 12,
            200: 14,
            400: 15.5,
            800: 18,
            1500: 20,
            3000: 23,
            5000: 25,
            10000: 30,
          },
          2000: {
            3: 12,
            5: 12,
            10: 12,
            20: 12,
            30: 12,
            50: 12,
            100: 12,
            200: 14,
            400: 15.5,
            800: 18,
            1500: 20,
            3000: 23,
            5000: 25,
            10000: 30,
          },
          3000: {
            3: 12,
            5: 12,
            10: 12,
            20: 12,
            30: 12,
            50: 12,
            100: 12,
            200: 14,
            400: 15.5,
            800: 18,
            1500: 20,
            3000: 23,
            5000: 25,
            10000: 30,
          },
          5000: {
            3: 29,
            5: 29,
            10: 29,
            20: 29,
            30: 29,
            50: 29,
            100: 29,
            200: 29,
            400: 29,
            800: 29,
            1500: 29,
            3000: 29,
            5000: 29,
            10000: 35,
          },
        },
        0.5: {
          1000: {
            3: 13,
            5: 13,
            10: 13,
            20: 13,
            30: 13,
            50: 13,
            100: 13,
            200: 15,
            400: 17,
            800: 20,
            1500: 22,
            3000: 25,
            5000: 28,
            10000: 32,
          },
          2000: {
            3: 13,
            5: 13,
            10: 13,
            20: 13,
            30: 13,
            50: 13,
            100: 13,
            200: 15,
            400: 17,
            800: 20,
            1500: 22,
            3000: 25,
            5000: 28,
            10000: 32,
          },
          3000: {
            3: 13,
            5: 13,
            10: 13,
            20: 13,
            30: 13,
            50: 13,
            100: 13,
            200: 15,
            400: 17,
            800: 20,
            1500: 22,
            3000: 25,
            5000: 28,
            10000: 32,
          },
          5000: {
            3: 31,
            5: 31,
            10: 31,
            20: 31,
            30: 31,
            50: 31,
            100: 31,
            200: 31,
            400: 31,
            800: 31,
            1500: 31,
            3000: 31,
            5000: 31,
            10000: 39,
          },
        },
        0.1: {
          1000: {
            3: 17.5,
            5: 17.5,
            10: 17.5,
            20: 17.5,
            30: 17.5,
            50: 17.5,
            100: 17.5,
            200: 20,
            400: 23,
            800: 25,
            1500: 28,
            3000: 31,
            5000: 35,
            10000: 49,
          },
          2000: {
            3: 17.5,
            5: 17.5,
            10: 17.5,
            20: 17.5,
            30: 17.5,
            50: 17.5,
            100: 17.5,
            200: 20,
            400: 23,
            800: 25,
            1500: 28,
            3000: 31,
            5000: 35,
            10000: 49,
          },
          3000: {
            3: 17.5,
            5: 17.5,
            10: 17.5,
            20: 17.5,
            30: 17.5,
            50: 17.5,
            100: 17.5,
            200: 20,
            400: 23,
            800: 25,
            1500: 28,
            3000: 31,
            5000: 35,
            10000: 49,
          },
          5000: {
            3: 41,
            5: 41,
            10: 41,
            20: 41,
            30: 41,
            50: 41,
            100: 41,
            200: 41,
            400: 41,
            800: 41,
            1500: 41,
            3000: 41,
            5000: 41,
            10000: 48,
          },
        },
        0.05: {
          1000: {
            3: 20,
            5: 20,
            10: 20,
            20: 20,
            30: 20,
            50: 20,
            100: 20,
            200: 23,
            400: 26,
            800: 30,
            1500: 32,
            3000: 37,
            5000: 41,
            10000: 58,
          },
          2000: {
            3: 20,
            5: 20,
            10: 20,
            20: 20,
            30: 20,
            50: 20,
            100: 20,
            200: 23,
            400: 26,
            800: 30,
            1500: 32,
            3000: 37,
            5000: 41,
            10000: 58,
          },
          3000: {
            3: 20,
            5: 20,
            10: 20,
            20: 20,
            30: 20,
            50: 20,
            100: 20,
            200: 23,
            400: 26,
            800: 30,
            1500: 32,
            3000: 37,
            5000: 41,
            10000: 58,
          },
          5000: {
            3: 47,
            5: 47,
            10: 47,
            20: 47,
            30: 47,
            50: 47,
            100: 47,
            200: 47,
            400: 47,
            800: 47,
            1500: 47,
            3000: 47,
            5000: 47,
            10000: 56,
          },
        },
        0.01: {
          1000: {
            3: 24,
            5: 24,
            10: 24,
            20: 24,
            30: 24,
            50: 24,
            100: 24,
            200: 28,
            400: 31,
            800: 36,
            1500: 38,
            3000: 44,
            5000: 49,
            10000: 59,
          },
          2000: {
            3: 24,
            5: 24,
            10: 24,
            20: 24,
            30: 24,
            50: 24,
            100: 24,
            200: 28,
            400: 31,
            800: 36,
            1500: 38,
            3000: 44,
            5000: 49,
            10000: 59,
          },
          3000: {
            3: 24,
            5: 24,
            10: 24,
            20: 24,
            30: 24,
            50: 24,
            100: 24,
            200: 28,
            400: 31,
            800: 36,
            1500: 38,
            3000: 44,
            5000: 49,
            10000: 59,
          },
          5000: {
            3: 57,
            5: 57,
            10: 57,
            20: 57,
            30: 57,
            50: 57,
            100: 57,
            200: 57,
            400: 57,
            800: 57,
            1500: 57,
            3000: 57,
            5000: 57,
            10000: 67,
          },
        },
      },
      chetirehkulachk_lunet: {
        1: {
          1000: {
            3: 1.5,
            5: 1.8,
            10: 2.3,
            20: 2.9,
            30: 6.9,
            50: 7.8,
            100: 9.3,
            200: 11,
            400: 13,
            800: 15.5,
            1500: 24,
            3000: 28,
            5000: 31,
            10000: 36,
          },
          2000: {
            3: 10,
            5: 10,
            10: 10,
            20: 10,
            30: 10,
            50: 10,
            100: 12,
            200: 14,
            400: 17,
            800: 20,
            1500: 24,
            3000: 28,
            5000: 31,
            10000: 36,
          },
          3000: {
            3: 10,
            5: 10,
            10: 10,
            20: 10,
            30: 10,
            50: 10,
            100: 12,
            200: 14,
            400: 17,
            800: 20,
            1500: 24,
            3000: 28,
            5000: 31,
            10000: 36,
          },
          5000: {
            3: 23,
            5: 23,
            10: 23,
            20: 23,
            30: 23,
            50: 23,
            100: 23,
            200: 23,
            400: 23,
            800: 23,
            1500: 27,
            3000: 32,
            5000: 36,
            10000: 42,
          },
        },
        0.5: {
          1000: {
            3: 1.6,
            5: 2,
            10: 2.5,
            20: 3.2,
            30: 7.6,
            50: 8.6,
            100: 10,
            200: 12,
            400: 14,
            800: 17,
            1500: 26,
            3000: 31,
            5000: 34,
            10000: 40,
          },
          2000: {
            3: 11,
            5: 11,
            10: 11,
            20: 11,
            30: 11,
            50: 11,
            100: 13,
            200: 15.5,
            400: 19,
            800: 22,
            1500: 26,
            3000: 31,
            5000: 34,
            10000: 40,
          },
          3000: {
            3: 11,
            5: 11,
            10: 11,
            20: 11,
            30: 11,
            50: 11,
            100: 13,
            200: 15.5,
            400: 19,
            800: 22,
            1500: 26,
            3000: 31,
            5000: 34,
            10000: 40,
          },
          5000: {
            3: 25,
            5: 25,
            10: 25,
            20: 25,
            30: 25,
            50: 25,
            100: 25,
            200: 25,
            400: 25,
            800: 25,
            1500: 30,
            3000: 35,
            5000: 40,
            10000: 46,
          },
        },
        0.1: {
          1000: {
            3: 1.8,
            5: 2.2,
            10: 2.8,
            20: 3.6,
            30: 8.5,
            50: 10,
            100: 11.5,
            200: 13.5,
            400: 16,
            800: 19.5,
            1500: 30,
            3000: 35,
            5000: 39,
            10000: 46,
          },
          2000: {
            3: 13,
            5: 13,
            10: 13,
            20: 13,
            30: 13,
            50: 13,
            100: 15,
            200: 18,
            400: 21,
            800: 25,
            1500: 30,
            3000: 35,
            5000: 39,
            10000: 46,
          },
          3000: {
            3: 13,
            5: 13,
            10: 13,
            20: 13,
            30: 13,
            50: 13,
            100: 15,
            200: 18,
            400: 21,
            800: 25,
            1500: 30,
            3000: 35,
            5000: 39,
            10000: 46,
          },
          5000: {
            3: 28,
            5: 28,
            10: 28,
            20: 28,
            30: 28,
            50: 28,
            100: 28,
            200: 28,
            400: 28,
            800: 28,
            1500: 33,
            3000: 40,
            5000: 45,
            10000: 53,
          },
        },
        0.05: {
          1000: {
            3: 2.2,
            5: 2.6,
            10: 3.4,
            20: 4.3,
            30: 10,
            50: 11,
            100: 13.5,
            200: 16,
            400: 19,
            800: 23,
            1500: 35,
            3000: 41,
            5000: 46,
            10000: 54,
          },
          2000: {
            3: 15,
            5: 15,
            10: 15,
            20: 15,
            30: 15,
            50: 15,
            100: 18,
            200: 21,
            400: 25,
            800: 30,
            1500: 35,
            3000: 41,
            5000: 46,
            10000: 54,
          },
          3000: {
            3: 15,
            5: 15,
            10: 15,
            20: 15,
            30: 15,
            50: 15,
            100: 18,
            200: 21,
            400: 25,
            800: 30,
            1500: 35,
            3000: 41,
            5000: 46,
            10000: 54,
          },
          5000: {
            3: 33,
            5: 33,
            10: 33,
            20: 33,
            30: 33,
            50: 33,
            100: 33,
            200: 33,
            400: 33,
            800: 33,
            1500: 39,
            3000: 47,
            5000: 53,
            10000: 63,
          },
        },
        0.01: {
          1000: {
            3: 2.6,
            5: 3.1,
            10: 4.1,
            20: 5.1,
            30: 12,
            50: 14,
            100: 16,
            200: 19,
            400: 23,
            800: 28,
            1500: 42,
            3000: 49,
            5000: 55,
            10000: 65,
          },
          2000: {
            3: 18,
            5: 18,
            10: 18,
            20: 18,
            30: 18,
            50: 18,
            100: 22,
            200: 25,
            400: 30,
            800: 36,
            1500: 42,
            3000: 49,
            5000: 55,
            10000: 65,
          },
          3000: {
            3: 18,
            5: 18,
            10: 18,
            20: 18,
            30: 18,
            50: 18,
            100: 22,
            200: 25,
            400: 30,
            800: 36,
            1500: 42,
            3000: 49,
            5000: 55,
            10000: 65,
          },
          5000: {
            3: 39,
            5: 39,
            10: 39,
            20: 39,
            30: 39,
            50: 39,
            100: 39,
            200: 39,
            400: 39,
            800: 39,
            1500: 47,
            3000: 56,
            5000: 62,
            10000: 75,
          },
        },
      },
    },
    fason_korobch: {
      chetirehkulachk: {
        0: {
          1000: {
            3: 1.1,
            5: 1.3,
            10: 1.6,
            20: 2,
            30: 5.5,
            50: 6.1,
            100: 7,
            200: 8,
            400: 9.1,
            800: 10.5,
            1500: 18,
            3000: 20,
          },
        },
        1: {
          1000: {
            3: 2.7,
            5: 3.2,
            10: 4,
            20: 5,
            30: 12.5,
            50: 13.5,
            100: 15.5,
            200: 17.5,
            400: 20,
            800: 22,
            1500: 25,
            3000: 28,
          },
        },
        0.5: {
          1000: {
            3: 3,
            5: 3.5,
            10: 4.4,
            20: 5.5,
            30: 13.5,
            50: 15,
            100: 17,
            200: 19.5,
            400: 22,
            800: 24,
            1500: 28,
            3000: 31,
          },
        },
        0.1: {
          1000: {
            3: 3.7,
            5: 4.4,
            10: 5.6,
            20: 7.1,
            30: 15,
            50: 17,
            100: 19,
            200: 21,
            400: 25,
            800: 28,
            1500: 31,
            3000: 36,
          },
        },
        0.05: {
          1000: {
            3: 4.4,
            5: 5.3,
            10: 6.7,
            20: 8.5,
            30: 18,
            50: 20,
            100: 22.5,
            200: 25,
            400: 29,
            800: 33,
            1500: 37,
            3000: 42,
          },
        },
        0.01: {
          1000: {
            3: 5.3,
            5: 6.4,
            10: 8.1,
            20: 10,
            30: 22,
            50: 24,
            100: 27.5,
            200: 30,
            400: 35,
            800: 39,
            1500: 44,
            3000: 50,
          },
        },
      },
    },
  },
  trasitionTime: {
    longturning: {
      420: {
        0: {
          100: { 50: 0.3, 100: 0.3, 500: 0.3 },
          500: { 50: 0.5, 100: 0.5, 500: 0.5 },
          1000: { 50: 0.7, 100: 0.7, 500: 0.7 },
          5000: { 50: 0.9, 100: 0.9, 500: 0.9 },
        },
        "12_14": {
          100: { 50: 0.7, 100: 0.8, 500: 1 },
          500: { 50: 1, 100: 1.1, 500: 1.6 },
          1000: { 50: 1.2, 100: 1.4, 500: 1.9 },
          5000: { 50: 1.5, 100: 1.8, 500: 2.4 },
        },
        "10_11": {
          100: { 50: 1.1, 100: 1.2, 500: 1.6 },
          500: { 50: 1.5, 100: 1.7, 500: 2.3 },
          1000: { 50: 1.8, 100: 2.0, 500: 2.8 },
          5000: { 50: 2.1, 100: 2.5, 500: 3.7 },
        },
        "8_9": {
          100: { 50: 1.6, 100: 1.8, 500: 2.4 },
          500: { 50: 2.4, 100: 2.7, 500: 3.3 },
          1000: { 50: 2.9, 100: 3.4, 500: 4.2 },
          5000: { 50: 3.6, 100: 4.2, 500: 4.8 },
        },
        "6_7": {
          100: { 50: 2.3, 100: 2.6, 500: 3.5 },
          500: { 50: 3.4, 100: 3.9, 500: 5.5 },
          1000: { 50: 4, 100: 4.7, 500: 6.5 },
          5000: { 50: 4.7, 100: 5.2, 500: 7.6 },
        },
      },
      900: {
        0: {
          100: { 50: 0.5, 100: 0.5, 500: 0.5, 1000: 0.5 },
          500: { 50: 0.6, 100: 0.6, 500: 0.6, 1000: 0.6 },
          1000: { 50: 0.8, 100: 0.8, 500: 0.8, 1000: 0.8 },
          2500: { 50: 1, 100: 1, 500: 1, 1000: 1 },
          8000: { 50: 1.3, 100: 1.3, 500: 1.3, 1000: 1.3 },
        },
        "12_14": {
          100: { 50: 0.8, 100: 1.1, 500: 1.3, 1000: 1.4 },
          500: { 50: 1.3, 100: 1.4, 500: 1.6, 1000: 2.4 },
          1000: { 50: 1.6, 100: 1.9, 500: 2.6, 1000: 2.9 },
          2500: { 50: 1.9, 100: 2.4, 500: 3.4, 1000: 3.8 },
          8000: { 50: 2.6, 100: 2.9, 500: 4.0, 1000: 4.6 },
        },
        "10_11": {
          100: { 50: 1.3, 100: 1.5, 500: 2, 1000: 2.3 },
          500: { 50: 1.9, 100: 2.2, 500: 3, 1000: 3.5 },
          1000: { 50: 2.2, 100: 2.6, 500: 3.5, 1000: 4 },
          2500: { 50: 2.9, 100: 3.3, 500: 4.5, 1000: 5.2 },
          8000: { 50: 3.4, 100: 3.9, 500: 5.3, 1000: 6.2 },
        },
        "8_9": {
          100: { 50: 2, 100: 2.3, 500: 2.9, 1000: 3.3 },
          500: { 50: 3, 100: 3.4, 500: 4.4, 1000: 4.9 },
          1000: { 50: 3.6, 100: 4.2, 500: 5.4, 1000: 6 },
          2500: { 50: 4.5, 100: 5.3, 500: 6.7, 1000: 7.3 },
          8000: { 50: 6.3, 100: 6.3, 500: 8, 1000: 8.9 },
        },
        "6_7": {
          100: { 50: 2.8, 100: 3.2, 500: 4.4, 1000: 5 },
          500: { 50: 4.2, 100: 4.8, 500: 6.2, 1000: 7.8 },
          1000: { 50: 5.1, 100: 6, 500: 8.2, 1000: 9.3 },
          2500: { 50: 6.3, 100: 7.8, 500: 10.1, 1000: 11.2 },
          8000: { 50: 7.7, 100: 9.5, 500: 12, 1000: 13.6 },
        },
      },
      2000: {
        0: {
          500: { 500: 1.1, 1000: 1.1, 2000: 1.1 },
          1000: { 500: 1.4, 1000: 1.4, 2000: 1.4 },
          2500: { 500: 1.9, 1000: 1.9, 2000: 1.9 },
          5000: { 500: 2.9, 1000: 2.9, 2000: 2.9 },
          10000: { 500: 4.8, 1000: 4.8, 2000: 4.8 },
        },
        "12_14": {
          500: { 500: 2.9, 1000: 3.4, 2000: 3.8 },
          1000: { 500: 3.5, 1000: 4.0, 2000: 4.6 },
          2500: { 500: 4.6, 1000: 5.3, 2000: 6 },
          5000: { 500: 5.6, 1000: 6.6, 2000: 7.5 },
          10000: { 500: 6.9, 1000: 8, 2000: 9.3 },
        },
        "10_11": {
          500: { 500: 4.3, 1000: 5.0, 2000: 5.7 },
          1000: { 500: 5.1, 1000: 5.9, 2000: 6.8 },
          2500: { 500: 6.5, 1000: 7.5, 2000: 8.6 },
          5000: { 500: 7.6, 1000: 8.8, 2000: 10 },
          10000: { 500: 9.1, 1000: 10.5, 2000: 12 },
        },
        "8_9": {
          500: { 500: 6.8, 1000: 7.8, 2000: 9 },
          1000: { 500: 8.1, 1000: 9.3, 2000: 10 },
          2500: { 500: 10.4, 1000: 11.9, 2000: 13.7 },
          5000: { 500: 12.3, 1000: 14.2, 2000: 16.3 },
          10000: { 500: 14.8, 1000: 17.2, 2000: 20.8 },
        },
        "6_7": {
          500: { 500: 10, 1000: 11.7, 2000: 13.4 },
          1000: { 500: 12, 1000: 13.8, 2000: 16 },
          2500: { 500: 15.6, 1000: 17.7, 2000: 20.4 },
          5000: { 500: 18.5, 1000: 21.4, 2000: 24.6 },
          10000: { 500: 22.3, 1000: 25.8, 2000: 29.7 },
        },
      },
    },
    crossturning: {
      420: {
        0: {
          50: { 50: 0.4, 100: 0.4, 500: 0.4, 1000: 0.4, 5000: 0.4 },
          100: { 50: 0.5, 100: 0.5, 500: 0.5, 1000: 0.5, 5000: 0.5 },
          250: { 50: 0.6, 100: 0.6, 500: 0.6, 1000: 0.6, 5000: 0.6 },
        },
        "12_14": {
          50: { 50: 0.5, 100: 0.6, 500: 0.9, 1000: 1, 5000: 1.5 },
          100: { 50: 0.6, 100: 1, 500: 1.1, 1000: 1.2, 5000: 1.7 },
          250: { 50: 1, 100: 1.1, 500: 1.2, 1000: 1.6, 5000: 2.2 },
        },
        "10_11": {
          50: { 50: 0.8, 100: 0.9, 500: 1, 1000: 1.4, 5000: 2 },
          100: { 50: 0.9, 100: 1, 500: 1.1, 1000: 1.5, 5000: 2.1 },
          250: { 50: 1, 100: 1.1, 500: 1.3, 1000: 1.7, 5000: 2.3 },
        },
        "8_9": {
          50: { 50: 1.2, 100: 1.3, 500: 1.5, 1000: 2.4, 3000: 3.4 },
          100: { 50: 1.3, 100: 1.7, 500: 1.9, 1000: 2.8, 3000: 3.9 },
          250: { 50: 1.7, 100: 2.1, 500: 2.5, 1000: 3.4, 3000: 4.6 },
        },
        "6_7": {
          50: { 50: 1.5, 100: 1.7, 500: 1.8, 1000: 2.7, 5000: 4.2 },
          100: { 50: 1.7, 100: 1.8, 500: 2, 1000: 2.8, 5000: 4.5 },
          250: { 50: 1.8, 100: 2.3, 500: 2.7, 1000: 3.6, 5000: 5.3 },
        },
      },
      900: {
        0: {
          50: { 50: 0.5, 100: 0.5, 500: 0.5, 1000: 0.5, 2500: 0.5, 8000: 0.5 },
          100: { 50: 0.6, 100: 0.6, 500: 0.6, 1000: 0.6, 2500: 0.6, 8000: 0.6 },
          250: { 50: 0.7, 100: 0.7, 500: 0.7, 1000: 0.7, 2500: 0.7, 8000: 0.7 },
          500: { 50: 0.9, 100: 0.9, 500: 0.9, 1000: 0.9, 2500: 0.9, 8000: 0.9 },
        },
        "12_14": {
          50: { 50: 0.5, 100: 0.5, 500: 0.5, 1000: 0.5, 2500: 0.5, 8000: 0.5 },
          100: { 50: 0.6, 100: 0.6, 500: 0.6, 1000: 0.6, 2500: 0.6, 8000: 0.6 },
          250: { 50: 0.7, 100: 0.7, 500: 0.7, 1000: 0.7, 2500: 0.7, 8000: 0.7 },
          500: { 50: 0.9, 100: 0.9, 500: 0.9, 1000: 0.9, 2500: 0.9, 8000: 0.9 },
        },
        "10_11": {
          50: { 50: 0.9, 100: 1.1, 500: 1.2, 1000: 1.7, 2500: 2.1, 8000: 2.6 },
          100: { 50: 1, 100: 1.2, 500: 1.5, 1000: 1.9, 2500: 2.6, 8000: 3.4 },
          250: { 50: 1.2, 100: 1.4, 500: 1.7, 1000: 2.3, 2500: 3, 8000: 3.9 },
          500: { 50: 1.3, 100: 1.5, 500: 1.9, 1000: 2.6, 2500: 3.3, 8000: 4.2 },
        },
        "8_9": {
          50: { 50: 1.6, 100: 1.9, 500: 2.2, 1000: 3, 2500: 4, 8000: 5.1 },
          100: { 50: 1.8, 100: 2.2, 500: 3.1, 1000: 4.3, 2500: 5.4, 8000: 6.6 },
          250: { 50: 2.2, 100: 3.1, 500: 3.3, 1000: 4.9, 2500: 6.3, 8000: 7.8 },
          500: { 50: 2.9, 100: 3.5, 500: 4.5, 1000: 5.6, 2500: 7.1, 8000: 8.9 },
        },
        "6_7": {
          50: { 50: 1.8, 100: 1.9, 500: 2.5, 1000: 3.5, 2500: 4.3, 8000: 5.4 },
          100: { 50: 1.9, 100: 2.5, 500: 3.6, 1000: 4.6, 2500: 5.9, 8000: 7.1 },
          250: { 50: 2.5, 100: 3.6, 500: 4.2, 1000: 5.3, 2500: 6.7, 8000: 8.3 },
          500: { 50: 3.6, 100: 4.2, 500: 5.2, 1000: 6.8, 2500: 7.7, 8000: 9.4 },
        },
      },
      2000: {
        0: {
          100: { 100: 1.3, 500: 1.3, 1000: 1.3, 3000: 1.3, 10000: 1.3 },
          200: { 100: 1.6, 500: 1.6, 1000: 1.6, 3000: 1.6, 10000: 1.6 },
          500: { 100: 1.9, 500: 1.9, 1000: 1.9, 3000: 1.3, 10000: 1.9 },
          1000: { 100: 2.4, 500: 2.4, 1000: 2.4, 3000: 2.4, 10000: 2.4 },
        },
        "12_14": {
          100: { 100: 1.6, 500: 1.9, 1000: 2.2, 3000: 2.6, 10000: 3 },
          200: { 100: 1.9, 500: 2, 1000: 2.6, 3000: 2.9, 10000: 3.4 },
          500: { 100: 2, 500: 2.2, 1000: 2.7, 3000: 3, 10000: 3.7 },
          1000: { 100: 2.2, 500: 2.4, 1000: 3, 3000: 3.2, 10000: 4.5 },
        },
        "10_11": {
          100: { 100: 2, 500: 2.3, 1000: 2.8, 3000: 3.2, 10000: 3.6 },
          200: { 100: 2.2, 500: 2.5, 1000: 3.1, 3000: 3.6, 10000: 4 },
          500: { 100: 2.4, 500: 2.7, 1000: 3.7, 3000: 4, 10000: 4.5 },
          1000: { 100: 2.6, 500: 3, 1000: 4.2, 3000: 4.3, 10000: 5.3 },
        },
        "8_9": {
          100: { 100: 3.3, 500: 3.8, 1000: 4.8, 3000: 5.7, 10000: 7.1 },
          200: { 100: 3.9, 500: 4.4, 1000: 5.5, 3000: 6.3, 10000: 7.5 },
          500: { 100: 4.3, 500: 4.8, 1000: 6.3, 3000: 7, 10000: 8.4 },
          1000: { 100: 4.8, 500: 5.4, 1000: 7.4, 3000: 8.4, 10000: 10 },
        },
        "6_7": {
          100: { 100: 5.1, 500: 5.8, 1000: 6.9, 3000: 8, 10000: 9.2 },
          200: { 100: 5.8, 500: 6.7, 1000: 7.9, 3000: 9, 10000: 10.3 },
          500: { 100: 6.7, 500: 7.5, 1000: 9.2, 3000: 10, 10000: 11.6 },
          1000: { 100: 7.5, 500: 8.4, 1000: 10, 3000: 11.4, 10000: 13.7 },
        },
      },
    },
    boring: {
      420: {
        0: {
          100: { 50: 0.3, 100: 0.3, 500: 0.3 },
          500: { 50: 0.4, 100: 0.4, 500: 0.4 },
          1000: { 50: 0.6, 100: 0.6, 500: 0.6 },
          5000: { 50: 0.9, 100: 0.9, 500: 0.9 },
        },
        "12_14": {
          100: { 50: 0.8, 100: 0.9, 500: 1.1 },
          500: { 50: 1.1, 100: 1.3, 500: 1.9 },
          1000: { 50: 1.4, 100: 1.6, 500: 2.3 },
          5000: { 50: 1.9, 100: 2.3, 500: 3 },
        },
        "10_11": {
          100: { 50: 1.2, 100: 1.4, 500: 2 },
          500: { 50: 1.8, 100: 2, 500: 2.8 },
          1000: { 50: 2.2, 100: 2.4, 500: 3.3 },
          5000: { 50: 2.6, 100: 3, 500: 4.2 },
        },
        "8_9": {
          100: { 50: 1.9, 100: 2.2, 500: 2.9 },
          500: { 50: 2.9, 100: 3.2, 500: 3.9 },
          1000: { 50: 3.5, 100: 3.9, 500: 5 },
          5000: { 50: 4.3, 100: 5, 500: 6.5 },
        },
        "6_7": {
          100: { 50: 2.8, 100: 3.2, 500: 4.2 },
          500: { 50: 4, 100: 4.7, 500: 6.6 },
          1000: { 50: 4.9, 100: 5.6, 500: 7.8 },
          5000: { 50: 6, 100: 7.2, 500: 9.8 },
        },
      },
      900: {
        0: {
          100: { 50: 0.8, 100: 0.8, 500: 0.8, 1000: 0.8 },
          500: { 50: 0.9, 100: 0.9, 500: 0.9, 1000: 0.9 },
          1000: { 50: 1, 100: 1, 500: 1, 1000: 1 },
          2500: { 50: 1.2, 100: 1.2, 500: 1.2, 1000: 1.2 },
          8000: { 50: 1.6, 100: 1.6, 500: 1.6, 1000: 1.6 },
        },
        "12_14": {
          100: { 50: 1, 100: 1.2, 500: 1.5, 1000: 1.7 },
          500: { 50: 1.5, 100: 1.7, 500: 1.9, 1000: 2.9 },
          1000: { 50: 1.9, 100: 2.3, 500: 3, 1000: 3.5 },
          2500: { 50: 2.3, 100: 2.9, 500: 4, 1000: 4.6 },
          8000: { 50: 3, 100: 3.5, 500: 4.8, 1000: 5.4 },
        },
        "10_11": {
          100: { 50: 1.6, 100: 1.8, 500: 2.4, 1000: 2.8 },
          500: { 50: 2.3, 100: 2.6, 500: 3.6, 1000: 4.2 },
          1000: { 50: 2.6, 100: 3, 500: 4.2, 1000: 4.9 },
          2500: { 50: 3.5, 100: 4, 500: 5.4, 1000: 6.2 },
          8000: { 50: 4, 100: 4.7, 500: 6.4, 1000: 7.5 },
        },
        "8_9": {
          100: { 50: 2.4, 100: 2.8, 500: 3.5, 1000: 3.9 },
          500: { 50: 3.6, 100: 4, 500: 5.3, 1000: 5.9 },
          1000: { 50: 4.3, 100: 5, 500: 6.5, 1000: 7.2 },
          2500: { 50: 5.4, 100: 6.4, 500: 8, 1000: 8.4 },
          8000: { 50: 6.1, 100: 7.6, 500: 9.6, 1000: 10.7 },
        },
        "6_7": {
          100: { 50: 3.4, 100: 3.8, 500: 5.3, 1000: 6 },
          500: { 50: 5, 100: 5.8, 500: 7.4, 1000: 9.4 },
          1000: { 50: 6, 100: 7.2, 500: 9.8, 1000: 11.2 },
          2500: { 50: 7.1, 100: 8.9, 500: 12.2, 1000: 14.3 },
          8000: { 50: 8.5, 100: 11, 500: 14.7, 1000: 17.1 },
        },
      },
      2000: {
        0: {
          500: { 500: 1.3, 1000: 1.3, 2000: 1.3 },
          750: { 500: 1.7, 1000: 1.7, 2000: 1.7 },
          1000: { 500: 2.3, 1000: 2.3, 2000: 2.3 },
          1500: { 500: 3.5, 1000: 3.5, 2000: 3.5 },
          2000: { 500: 4.9, 1000: 4.9, 2000: 4.9 },
        },
        "12_14": {
          500: { 500: 3.5, 1000: 4, 2000: 4.5 },
          750: { 500: 4.8, 1000: 5, 2000: 5.6 },
          1000: { 500: 5.6, 1000: 6.2, 2000: 7.4 },
          1500: { 500: 6.7, 1000: 7.8, 2000: 8.9 },
          2000: { 500: 8.3, 1000: 9.6, 2000: 11 },
        },
        "10_11": {
          500: { 500: 5.2, 1000: 6, 2000: 6.8 },
          750: { 500: 6, 1000: 7, 2000: 8.2 },
          1000: { 500: 7.8, 1000: 9, 2000: 10.3 },
          1500: { 500: 9, 1000: 10.6, 2000: 12 },
          2000: { 500: 10.9, 1000: 12.6, 2000: 14.4 },
        },
        "8_9": {
          500: { 500: 8.2, 1000: 9.4, 2000: 10.8 },
          750: { 500: 9.7, 1000: 11.2, 2000: 12 },
          1000: { 500: 12.5, 1000: 14.3, 2000: 16.4 },
          1500: { 500: 14.8, 1000: 17, 2000: 19.5 },
          2000: { 500: 17.8, 1000: 20.6, 2000: 25 },
        },
        "6_7": {
          500: { 500: 12, 1000: 14, 2000: 16 },
          750: { 500: 14.5, 1000: 16.6, 2000: 19.3 },
          1000: { 500: 18.7, 1000: 21.2, 2000: 24.5 },
          1500: { 500: 22.2, 1000: 25.7, 2000: 29.5 },
          2000: { 500: 26.8, 1000: 30.9, 2000: 35.5 },
        },
      },
    },
    drilling: {
      matP: {
        5: { 50: 1.2, 100: 3.3, 200: 9 },
        10: { 50: 0.85, 100: 2.3, 200: 8, 300: 16, 400: 23, 500: 27 },
        15: { 50: 0.85, 100: 2.3, 200: 6.5, 300: 14, 400: 21, 500: 28, 600: 33 },
        20: { 50: 0.85, 100: 2, 200: 5.5, 300: 12, 400: 20, 500: 23, 600: 28, 700: 33, 800: 40 },
        30: {
          50: 0.85,
          100: 1.6,
          200: 4.7,
          300: 9,
          400: 16,
          500: 20,
          600: 23,
          700: 28,
          800: 35,
          900: 40,
          1000: 48,
        },
        40: {
          50: 0.85,
          100: 1.6,
          200: 4,
          300: 8,
          400: 12,
          500: 16,
          600: 20,
          700: 23,
          800: 33,
          900: 35,
          1000: 44,
        },
        60: {
          50: 0.85,
          100: 1.6,
          200: 3.3,
          300: 5.5,
          400: 8,
          500: 12,
          600: 16,
          700: 20,
          800: 24,
          900: 28,
          1000: 32,
        },
      },
      matK: {
        5: { 50: 0.9, 100: 2.8, 200: 6.5 },
        10: { 50: 0.65, 100: 2.3, 200: 5.6, 300: 12, 400: 20, 500: 25 },
        15: { 50: 0.55, 100: 2, 200: 4.7, 300: 9, 400: 16, 500: 20, 600: 23 },
        20: { 50: 0.55, 100: 1.6, 200: 4.5, 300: 7.5, 400: 13, 500: 16, 600: 20, 700: 24, 800: 32 },
        30: {
          50: 0.55,
          100: 1.2,
          200: 3.3,
          300: 5.5,
          400: 10,
          500: 14,
          600: 16,
          700: 20,
          800: 28,
          900: 33,
          1000: 35,
        },
        40: {
          50: 0.55,
          100: 0.85,
          200: 2.3,
          300: 4.7,
          400: 9,
          500: 11,
          600: 15,
          700: 16,
          800: 23,
          900: 26,
          1000: 28,
        },
        60: {
          50: 0.55,
          100: 0.65,
          200: 2,
          300: 4.2,
          400: 6.5,
          500: 8.5,
          600: 12,
          700: 15,
          800: 17,
          900: 20,
          1000: 23,
        },
      },
      matN: {
        5: { 50: 0.9, 100: 2.8, 200: 6.5 },
        10: { 50: 0.65, 100: 2.3, 200: 5.6, 300: 12, 400: 20, 500: 25 },
        15: { 50: 0.55, 100: 2, 200: 4.7, 300: 9, 400: 16, 500: 20, 600: 23 },
        20: { 50: 0.55, 100: 1.6, 200: 4.5, 300: 7.5, 400: 13, 500: 16, 600: 20, 700: 24, 800: 32 },
        30: {
          50: 0.55,
          100: 1.2,
          200: 3.3,
          300: 5.5,
          400: 10,
          500: 14,
          600: 16,
          700: 20,
          800: 28,
          900: 33,
          1000: 35,
        },
        40: {
          50: 0.55,
          100: 0.85,
          200: 2.3,
          300: 4.7,
          400: 9,
          500: 11,
          600: 15,
          700: 16,
          800: 23,
          900: 26,
          1000: 28,
        },
        60: {
          50: 0.55,
          100: 0.65,
          200: 2,
          300: 4.2,
          400: 6.5,
          500: 8.5,
          600: 12,
          700: 15,
          800: 17,
          900: 20,
          1000: 23,
        },
      },
    },
    countersinking: {
      matP: {
        20: { 50: 0.75, 100: 1.4, 200: 3.8, 300: 6.5, 400: 10 },
        30: { 50: 0.75, 100: 1.1, 200: 2.8, 300: 4.7, 400: 8.5, 500: 10, 600: 15 },
        40: { 50: 0.75, 100: 0.9, 200: 1.9, 300: 3.8, 400: 6, 500: 8.5, 600: 13, 700: 17, 800: 20 },
        60: {
          50: 0.75,
          100: 0.9,
          200: 1.7,
          300: 2.8,
          400: 4.7,
          500: 7.5,
          600: 10,
          700: 15,
          800: 17,
          900: 22,
          1000: 30,
        },
        70: {
          50: 0.75,
          100: 0.9,
          200: 1.7,
          300: 2.8,
          400: 4.7,
          500: 7,
          600: 9,
          700: 12,
          800: 15,
          900: 19,
          1000: 26,
        },
        80: {
          50: 0.75,
          100: 0.9,
          200: 1.7,
          300: 2.8,
          400: 4.2,
          500: 6,
          600: 8.5,
          700: 11,
          800: 14,
          900: 18,
          1000: 22,
        },
      },
      matK: {
        20: { 50: 0.65, 100: 1.1, 200: 3.3, 300: 5.5, 400: 9 },
        30: { 50: 0.65, 100: 0.9, 200: 1.9, 300: 5.8, 400: 7, 500: 9, 600: 14 },
        40: { 50: 0.65, 100: 0.75, 200: 1.5, 300: 3, 400: 5.2, 500: 7, 600: 10, 700: 16, 800: 20 },
        60: {
          50: 0.65,
          100: 0.75,
          200: 1.4,
          300: 2.3,
          400: 3.8,
          500: 6,
          600: 8.5,
          700: 12,
          800: 15,
          900: 19,
          1000: 25,
        },
        70: {
          50: 0.65,
          100: 0.75,
          200: 1.4,
          300: 1.9,
          400: 3.8,
          500: 5.5,
          600: 7.5,
          700: 10,
          800: 12,
          900: 14,
          1000: 20,
        },
        80: {
          50: 0.65,
          100: 0.75,
          200: 1.4,
          300: 1.9,
          400: 3.8,
          500: 5,
          600: 7,
          700: 9,
          800: 11,
          900: 13,
          1000: 17,
        },
      },
      matN: {
        20: { 50: 0.65, 100: 1.1, 200: 3.3, 300: 5.5, 400: 9 },
        30: { 50: 0.65, 100: 0.9, 200: 1.9, 300: 5.8, 400: 7, 500: 9, 600: 14 },
        40: { 50: 0.65, 100: 0.75, 200: 1.5, 300: 3, 400: 5.2, 500: 7, 600: 10, 700: 16, 800: 20 },
        60: {
          50: 0.65,
          100: 0.75,
          200: 1.4,
          300: 2.3,
          400: 3.8,
          500: 6,
          600: 8.5,
          700: 12,
          800: 15,
          900: 19,
          1000: 25,
        },
        70: {
          50: 0.65,
          100: 0.75,
          200: 1.4,
          300: 1.9,
          400: 3.8,
          500: 5.5,
          600: 7.5,
          700: 10,
          800: 12,
          900: 14,
          1000: 20,
        },
        80: {
          50: 0.65,
          100: 0.75,
          200: 1.4,
          300: 1.9,
          400: 3.8,
          500: 5,
          600: 7,
          700: 9,
          800: 11,
          900: 13,
          1000: 17,
        },
      },
    },
    reaming: {
      50: 1.9,
      100: 2,
      200: 2.3,
      300: 2.5,
      400: 2.8,
      500: 3,
      600: 3.5,
      700: 3.9,
      800: 4.2,
      900: 4.6,
      1000: 5.2,
    },
  },
  feeds: {
    numberPasses: {
      20: {
        longturning: { "12_14": 1, "10_11": 1 },
        boring: { "12_14": 1, "10_11": 1 },
      },
      10: {
        longturning: { "12_14": 1, "10_11": 1, "8_9": 2, "6_7": 3 },
        boring: { "12_14": 1, "10_11": 2, "8_9": 3, "6_7": 3 },
      },
      5: {
        longturning: { "12_14": 1, "10_11": 1, "8_9": 2, "6_7": 3 },
        boring: { "12_14": 1, "10_11": 2, "8_9": 3, "6_7": 3 },
      },
      2.5: {
        longturning: { "12_14": 1, "10_11": 1, "8_9": 2, "6_7": 3 },
        boring: { "12_14": 1, "10_11": 2, "8_9": 3, "6_7": 3 },
      },
    },
    longturning: {
      rough: {
        matP: {
          250: {
            20: { 3: 0.3 },
            40: { 3: 0.5, 5: 0.4 },
            60: { 3: 0.6, 5: 0.5 },
            100: { 3: 0.8, 5: 0.6 },
            350: { 3: 1, 5: 0.8 },
            500: { 3: 1.1, 5: 0.9 },
          },
          315: {
            100: { 3: 0.9, 5: 0.8, 6: 0.7 },
            350: { 3: 1, 5: 0.9, 6: 0.8 },
            630: { 3: 1.2, 5: 1.1, 6: 1 },
          },
          400: {
            100: { 3: 1.1, 5: 1, 6: 1, 8: 0.9 },
            350: { 3: 1.3, 5: 1.2, 6: 1.2, 8: 1.1 },
            800: { 3: 1.6, 5: 1.5, 6: 1.3, 8: 1.2 },
          },
          500: {
            350: { 3: 1.4, 5: 1.3, 6: 1.2, 8: 1.1, 10: 1, 12: 0.9 },
            500: { 3: 1.6, 5: 1.5, 6: 1.4, 8: 1.3, 10: 1.2, 12: 1.1 },
            1000: { 3: 1.6, 5: 1.5, 6: 1.4, 8: 1.3, 10: 1.2, 12: 1.1 },
          },
        },
        matK: {
          250: {
            20: { 3: 0.5 },
            40: { 3: 0.6, 5: 0.5 },
            60: { 3: 0.7, 5: 0.6 },
            100: { 3: 1, 5: 0.9 },
            350: { 3: 1.2, 5: 1 },
            500: { 3: 1.3, 5: 1.1 },
          },
          315: {
            100: { 3: 1.1, 5: 1, 6: 0.9 },
            350: { 3: 1.2, 5: 1.1, 6: 1 },
            630: { 3: 1.3, 5: 1.2, 6: 1.1 },
          },
          400: {
            100: { 3: 1.2, 5: 1.1, 6: 1.1, 8: 1 },
            350: { 3: 1.4, 5: 1.4, 6: 1.3, 8: 1.2 },
            800: { 3: 1.7, 5: 1.5, 6: 1.4, 8: 1.3 },
          },
          500: {
            350: { 3: 1.6, 5: 1.5, 6: 1.4, 8: 1.3, 10: 1.2, 12: 1.1 },
            500: { 3: 1.8, 5: 1.7, 6: 1.6, 8: 1.5, 10: 1.4, 12: 1.3 },
            1000: { 3: 2, 5: 1.8, 6: 1.7, 8: 1.6, 10: 1.5, 12: 1.4 },
          },
        },
        matN: {
          250: {
            20: { 3: 0.5 },
            40: { 3: 0.6, 5: 0.5 },
            60: { 3: 0.7, 5: 0.6 },
            100: { 3: 1, 5: 0.9 },
            350: { 3: 1.2, 5: 1 },
            500: { 3: 1.3, 5: 1.1 },
          },
          315: {
            100: { 3: 1.1, 5: 1, 6: 0.9 },
            350: { 3: 1.2, 5: 1.1, 6: 1 },
            630: { 3: 1.3, 5: 1.2, 6: 1.1 },
          },
          400: {
            100: { 3: 1.2, 5: 1.1, 6: 1.1, 8: 1 },
            350: { 3: 1.4, 5: 1.4, 6: 1.3, 8: 1.2 },
            800: { 3: 1.7, 5: 1.5, 6: 1.4, 8: 1.3 },
          },
          500: {
            350: { 3: 1.6, 5: 1.5, 6: 1.4, 8: 1.3, 10: 1.2, 12: 1.1 },
            500: { 3: 1.8, 5: 1.7, 6: 1.6, 8: 1.5, 10: 1.4, 12: 1.3 },
            1000: { 3: 2, 5: 1.8, 6: 1.7, 8: 1.6, 10: 1.5, 12: 1.4 },
          },
        },
      },
      finish: {
        matP: {
          170: {
            0.5: {
              50: { 20: 0.9, 10: 0.35, 5: 0.2, 2.5: 0.1 },
              80: { 20: 0.9, 10: 0.41, 5: 0.25, 2.5: 0.15 },
              120: { 20: 0.9, 10: 0.41, 5: 0.28, 2.5: 0.2 },
            },
            1.0: {
              50: { 20: 1.1, 10: 0.45, 5: 0.23, 2.5: 0.14 },
              80: { 20: 1.1, 10: 0.55, 5: 0.3, 2.5: 0.21 },
              120: { 20: 1.1, 10: 0.55, 5: 0.32, 2.5: 0.25 },
            },
            2.0: {
              50: { 20: 1.2, 10: 0.6, 5: 0.31, 2.5: 0.21 },
              80: { 20: 1.2, 10: 0.65, 5: 0.39, 2.5: 0.27 },
              120: { 20: 1.2, 10: 0.65, 5: 0.42, 2.5: 0.31 },
            },
            3.0: {
              50: { 20: 1.5, 10: 0.65, 5: 0.36, 2.5: 0.21 },
              80: { 20: 1.5, 10: 0.7, 5: 0.45, 2.5: 0.31 },
              120: { 20: 1.5, 10: 0.7, 5: 0.5, 2.5: 0.36 },
            },
          },
          210: {
            0.5: {
              50: { 20: 1, 10: 0.4, 5: 0.22, 2.5: 0.1 },
              80: { 20: 1, 10: 0.47, 5: 0.28, 2.5: 0.14 },
              120: { 20: 1, 10: 0.47, 5: 0.31, 2.5: 0.18 },
            },
            1.0: {
              50: { 20: 1.2, 10: 0.5, 5: 0.26, 2.5: 0.13 },
              80: { 20: 1.2, 10: 0.6, 5: 0.33, 2.5: 0.2 },
              120: { 20: 1.2, 10: 0.6, 5: 0.36, 2.5: 0.23 },
            },
            2.0: {
              50: { 20: 1.35, 10: 0.65, 5: 0.35, 2.5: 0.2 },
              80: { 20: 1.35, 10: 0.7, 5: 0.43, 2.5: 0.3 },
              120: { 20: 1.35, 10: 0.7, 5: 0.47, 2.5: 0.35 },
            },
            3.0: {
              50: { 20: 1.7, 10: 0.72, 5: 0.4, 2.5: 0.24 },
              80: { 20: 1.7, 10: 0.8, 5: 0.5, 2.5: 0.35 },
              120: { 20: 1.7, 10: 0.8, 5: 0.55, 2.5: 0.4 },
            },
          },
          280: {
            0.5: {
              50: { 20: 1.2, 10: 0.5, 5: 0.26, 2.5: 0.12 },
              80: { 20: 1.2, 10: 0.6, 5: 0.34, 2.5: 0.17 },
              120: { 20: 1.2, 10: 0.6, 5: 0.37, 2.5: 0.22 },
            },
            1.0: {
              50: { 20: 1.5, 10: 0.6, 5: 0.31, 2.5: 0.16 },
              80: { 20: 1.5, 10: 0.7, 5: 0.34, 2.5: 0.17 },
              120: { 20: 1.5, 10: 0.7, 5: 0.37, 2.5: 0.22 },
            },
            2.0: {
              50: { 20: 1.7, 10: 0.8, 5: 0.42, 2.5: 0.24 },
              80: { 20: 1.7, 10: 0.85, 5: 0.52, 2.5: 0.36 },
              120: { 20: 1.7, 10: 0.85, 5: 0.56, 2.5: 0.42 },
            },
            3.0: {
              50: { 20: 2.1, 10: 0.9, 5: 0.48, 2.5: 0.29 },
              80: { 20: 2.1, 10: 0.95, 5: 0.6, 2.5: 0.42 },
              120: { 20: 2.1, 10: 0.95, 5: 0.65, 2.5: 0.48 },
            },
          },
        },
        matK: {
          170: {
            0.5: { 20: 1.05, 10: 0.28, 5: 0.18, 2.5: 0.12 },
            1.0: { 20: 1.3, 10: 0.4, 5: 0.3, 2.5: 0.16 },
            2.0: { 20: 1.4, 10: 0.5, 5: 0.45, 2.5: 0.25 },
            3.0: { 20: 1.7, 10: 0.58, 5: 0.53, 2.5: 0.28 },
          },
          210: {
            0.5: { 20: 1.2, 10: 0.32, 5: 0.2, 2.5: 0.13 },
            1.0: { 20: 1.45, 10: 0.45, 5: 0.33, 2.5: 0.18 },
            2.0: { 20: 1.6, 10: 0.55, 5: 0.5, 2.5: 0.28 },
            3.0: { 20: 1.9, 10: 0.65, 5: 0.6, 2.5: 0.32 },
          },
          280: {
            0.5: { 20: 1.25, 10: 0.35, 5: 0.22, 2.5: 0.14 },
            1.0: { 20: 1.5, 10: 0.5, 5: 0.36, 2.5: 0.2 },
            2.0: { 20: 1.7, 10: 0.6, 5: 0.55, 2.5: 0.31 },
            3.0: { 20: 2, 10: 0.7, 5: 0.65, 2.5: 0.35 },
          },
        },
        matN: {
          170: {
            0.5: { 20: 1.05, 10: 0.28, 5: 0.18, 2.5: 0.12 },
            1.0: { 20: 1.3, 10: 0.4, 5: 0.3, 2.5: 0.16 },
            2.0: { 20: 1.4, 10: 0.5, 5: 0.45, 2.5: 0.25 },
            3.0: { 20: 1.7, 10: 0.58, 5: 0.53, 2.5: 0.28 },
          },
          210: {
            0.5: { 20: 1.2, 10: 0.32, 5: 0.2, 2.5: 0.13 },
            1.0: { 20: 1.45, 10: 0.45, 5: 0.33, 2.5: 0.18 },
            2.0: { 20: 1.6, 10: 0.55, 5: 0.5, 2.5: 0.28 },
            3.0: { 20: 1.9, 10: 0.65, 5: 0.6, 2.5: 0.32 },
          },
          280: {
            0.5: { 20: 1.25, 10: 0.35, 5: 0.22, 2.5: 0.14 },
            1.0: { 20: 1.5, 10: 0.5, 5: 0.36, 2.5: 0.2 },
            2.0: { 20: 1.7, 10: 0.6, 5: 0.55, 2.5: 0.31 },
            3.0: { 20: 2, 10: 0.7, 5: 0.65, 2.5: 0.35 },
          },
        },
      },
    },
    boring: {
      rough: {
        matP: {
          "12x12": {
            60: { 1.5: 0.15, 3: 0.1 },
          },
          "16x16": {
            70: { 1.5: 0.25, 3: 0.2 },
            150: { 1.5: 0.18, 3: 0.15 },
          },
          "20x20": {
            80: { 1.5: 0.4, 3: 0.3 },
            150: { 1.5: 0.3, 3: 0.2 },
          },
          "25x25": {
            100: { 1.5: 0.6, 3: 0.4, 5: 0.25 },
            200: { 1.5: 0.5, 3: 0.3, 5: 0.15 },
          },
          "30x30": {
            150: { 1.5: 0.8, 3: 0.5, 5: 0.35 },
            250: { 1.5: 0.7, 3: 0.4, 5: 0.25 },
          },
          "40x40": {
            150: { 1.5: 1.1, 3: 0.9, 5: 0.6 },
            200: { 1.5: 1, 3: 0.8, 5: 0.5 },
            300: { 1.5: 0.9, 3: 0.7, 5: 0.4 },
            500: { 1.5: 0.6, 3: 0.4, 5: 0.3 },
            800: { 1.5: 0.5, 3: 0.3 },
          },
          "60x60": {
            200: { 1.5: 1.25, 3: 1.1, 5: 0.8, 10: 0.7, 13: 0.6 },
            300: { 1.5: 1.2, 3: 1, 5: 0.7, 10: 0.6, 13: 0.5 },
            500: { 1.5: 1, 3: 0.8, 5: 0.6, 10: 0.5, 13: 0.4 },
            800: { 1.5: 0.8, 3: 0.6, 5: 0.5, 10: 0.4 },
            1000: { 1.5: 0.7, 3: 0.5, 5: 0.4 },
            1200: { 1.5: 0.6, 3: 0.4 },
          },
          "80x80": {
            300: { 1.5: 1.5, 3: 1.2, 5: 0.9, 10: 0.8, 13: 0.7 },
            500: { 1.5: 1.3, 3: 1.1, 5: 0.8, 10: 0.7, 13: 0.6 },
            800: { 1.5: 1, 3: 0.9, 5: 0.7, 10: 0.6, 13: 0.5 },
            1000: { 1.5: 0.9, 3: 0.7, 5: 0.6, 10: 0.5, 13: 0.4 },
            1200: { 1.5: 0.8, 3: 0.6, 5: 0.5, 10: 0.4 },
          },
        },
        matK: {
          "12x12": {
            60: { 1.5: 0.2, 3: 0.15 },
          },
          "16x16": {
            70: { 1.5: 0.3, 3: 0.25 },
            150: { 1.5: 0.25, 3: 0.2 },
          },
          "20x20": {
            80: { 1.5: 0.5, 3: 0.35 },
            150: { 1.5: 0.4, 3: 0.25 },
          },
          "25x25": {
            100: { 1.5: 0.7, 3: 0.5, 5: 0.3 },
            200: { 1.5: 0.6, 3: 0.35, 5: 0.2 },
          },
          "30x30": {
            150: { 1.5: 0.9, 3: 0.7, 5: 0.4 },
            250: { 1.5: 0.85, 3: 0.5, 5: 0.3 },
          },
          "40x40": {
            150: { 1.5: 1.35, 3: 1, 5: 0.8 },
            200: { 1.5: 1.3, 3: 0.9, 5: 0.7 },
            300: { 1.5: 1.2, 3: 1, 5: 0.5 },
            500: { 1.5: 0.9, 3: 0.5, 5: 0.4 },
            800: { 1.5: 0.7, 3: 0.4 },
          },
          "60x60": {
            200: { 1.5: 1.55, 3: 1.4, 5: 1, 10: 0.9, 13: 0.8 },
            300: { 1.5: 1.5, 3: 1.3, 5: 0.9, 10: 0.8, 13: 0.7 },
            500: { 1.5: 1.2, 3: 1, 5: 0.8, 10: 0.7, 13: 0.5 },
            800: { 1.5: 1, 3: 0.8, 5: 0.6, 10: 0.4 },
            1000: { 1.5: 0.9, 3: 0.6, 5: 0.5 },
            1200: { 1.5: 0.7, 3: 0.5 },
          },
          "80x80": {
            300: { 1.5: 1.8, 3: 1.6, 5: 1.3, 10: 1, 13: 0.9 },
            500: { 1.5: 1.6, 3: 1.4, 5: 1.2, 10: 0.9, 13: 0.8 },
            800: { 1.5: 1.4, 3: 1.1, 5: 1, 10: 0.8, 13: 0.6 },
            1000: { 1.5: 1.2, 3: 0.9, 5: 0.8, 10: 0.6, 13: 0.5 },
            1200: { 1.5: 1, 3: 0.8, 5: 0.6, 10: 0.5 },
          },
        },
        matN: {
          "12x12": {
            60: { 1.5: 0.2, 3: 0.15 },
          },
          "16x16": {
            70: { 1.5: 0.3, 3: 0.25 },
            150: { 1.5: 0.25, 3: 0.2 },
          },
          "20x20": {
            80: { 1.5: 0.5, 3: 0.35 },
            150: { 1.5: 0.4, 3: 0.25 },
          },
          "25x25": {
            100: { 1.5: 0.7, 3: 0.5, 5: 0.3 },
            200: { 1.5: 0.6, 3: 0.35, 5: 0.2 },
          },
          "30x30": {
            150: { 1.5: 0.9, 3: 0.7, 5: 0.4 },
            250: { 1.5: 0.85, 3: 0.5, 5: 0.3 },
          },
          "40x40": {
            150: { 1.5: 1.35, 3: 1, 5: 0.8 },
            200: { 1.5: 1.3, 3: 0.9, 5: 0.7 },
            300: { 1.5: 1.2, 3: 1, 5: 0.5 },
            500: { 1.5: 0.9, 3: 0.5, 5: 0.4 },
            800: { 1.5: 0.7, 3: 0.4 },
          },
          "60x60": {
            200: { 1.5: 1.55, 3: 1.4, 5: 1, 10: 0.9, 13: 0.8 },
            300: { 1.5: 1.5, 3: 1.3, 5: 0.9, 10: 0.8, 13: 0.7 },
            500: { 1.5: 1.2, 3: 1, 5: 0.8, 10: 0.7, 13: 0.5 },
            800: { 1.5: 1, 3: 0.8, 5: 0.6, 10: 0.4 },
            1000: { 1.5: 0.9, 3: 0.6, 5: 0.5 },
            1200: { 1.5: 0.7, 3: 0.5 },
          },
          "80x80": {
            300: { 1.5: 1.8, 3: 1.6, 5: 1.3, 10: 1, 13: 0.9 },
            500: { 1.5: 1.6, 3: 1.4, 5: 1.2, 10: 0.9, 13: 0.8 },
            800: { 1.5: 1.4, 3: 1.1, 5: 1, 10: 0.8, 13: 0.6 },
            1000: { 1.5: 1.2, 3: 0.9, 5: 0.8, 10: 0.6, 13: 0.5 },
            1200: { 1.5: 1, 3: 0.8, 5: 0.6, 10: 0.5 },
          },
        },
      },
      finish: {
        matP: {
          170: {
            0.5: {
              50: { 20: 0.9, 10: 0.35, 5: 0.2, 2.5: 0.1 },
              80: { 20: 0.9, 10: 0.41, 5: 0.25, 2.5: 0.15 },
              120: { 20: 0.9, 10: 0.41, 5: 0.28, 2.5: 0.2 },
            },
            1.0: {
              50: { 20: 1.1, 10: 0.45, 5: 0.23, 2.5: 0.14 },
              80: { 20: 1.1, 10: 0.55, 5: 0.3, 2.5: 0.21 },
              120: { 20: 1.1, 10: 0.55, 5: 0.32, 2.5: 0.25 },
            },
            2.0: {
              50: { 20: 1.2, 10: 0.6, 5: 0.31, 2.5: 0.21 },
              80: { 20: 1.2, 10: 0.65, 5: 0.39, 2.5: 0.27 },
              120: { 20: 1.2, 10: 0.65, 5: 0.42, 2.5: 0.31 },
            },
            3.0: {
              50: { 20: 1.5, 10: 0.65, 5: 0.36, 2.5: 0.21 },
              80: { 20: 1.5, 10: 0.7, 5: 0.45, 2.5: 0.31 },
              120: { 20: 1.5, 10: 0.7, 5: 0.5, 2.5: 0.36 },
            },
          },
          210: {
            0.5: {
              50: { 20: 1, 10: 0.4, 5: 0.22, 2.5: 0.1 },
              80: { 20: 1, 10: 0.47, 5: 0.28, 2.5: 0.14 },
              120: { 20: 1, 10: 0.47, 5: 0.31, 2.5: 0.18 },
            },
            1.0: {
              50: { 20: 1.2, 10: 0.5, 5: 0.26, 2.5: 0.13 },
              80: { 20: 1.2, 10: 0.6, 5: 0.33, 2.5: 0.2 },
              120: { 20: 1.2, 10: 0.6, 5: 0.36, 2.5: 0.23 },
            },
            2.0: {
              50: { 20: 1.35, 10: 0.65, 5: 0.35, 2.5: 0.2 },
              80: { 20: 1.35, 10: 0.7, 5: 0.43, 2.5: 0.3 },
              120: { 20: 1.35, 10: 0.7, 5: 0.47, 2.5: 0.35 },
            },
            3.0: {
              50: { 20: 1.7, 10: 0.72, 5: 0.4, 2.5: 0.24 },
              80: { 20: 1.7, 10: 0.8, 5: 0.5, 2.5: 0.35 },
              120: { 20: 1.7, 10: 0.8, 5: 0.55, 2.5: 0.4 },
            },
          },
          280: {
            0.5: {
              50: { 20: 1.2, 10: 0.5, 5: 0.26, 2.5: 0.12 },
              80: { 20: 1.2, 10: 0.6, 5: 0.34, 2.5: 0.17 },
              120: { 20: 1.2, 10: 0.6, 5: 0.37, 2.5: 0.22 },
            },
            1.0: {
              50: { 20: 1.5, 10: 0.6, 5: 0.31, 2.5: 0.16 },
              80: { 20: 1.5, 10: 0.7, 5: 0.34, 2.5: 0.17 },
              120: { 20: 1.5, 10: 0.7, 5: 0.37, 2.5: 0.22 },
            },
            2.0: {
              50: { 20: 1.7, 10: 0.8, 5: 0.42, 2.5: 0.24 },
              80: { 20: 1.7, 10: 0.85, 5: 0.52, 2.5: 0.36 },
              120: { 20: 1.7, 10: 0.85, 5: 0.56, 2.5: 0.42 },
            },
            3.0: {
              50: { 20: 2.1, 10: 0.9, 5: 0.48, 2.5: 0.29 },
              80: { 20: 2.1, 10: 0.95, 5: 0.6, 2.5: 0.42 },
              120: { 20: 2.1, 10: 0.95, 5: 0.65, 2.5: 0.48 },
            },
          },
        },
        matK: {
          170: {
            0.5: { 20: 1.05, 10: 0.28, 5: 0.18, 2.5: 0.12 },
            1.0: { 20: 1.3, 10: 0.4, 5: 0.3, 2.5: 0.16 },
            2.0: { 20: 1.4, 10: 0.5, 5: 0.45, 2.5: 0.25 },
            3.0: { 20: 1.7, 10: 0.58, 5: 0.53, 2.5: 0.28 },
          },
          210: {
            0.5: { 20: 1.2, 10: 0.32, 5: 0.2, 2.5: 0.13 },
            1.0: { 20: 1.45, 10: 0.45, 5: 0.33, 2.5: 0.18 },
            2.0: { 20: 1.6, 10: 0.55, 5: 0.5, 2.5: 0.28 },
            3.0: { 20: 1.9, 10: 0.65, 5: 0.6, 2.5: 0.32 },
          },
          280: {
            0.5: { 20: 1.25, 10: 0.35, 5: 0.22, 2.5: 0.14 },
            1.0: { 20: 1.5, 10: 0.5, 5: 0.36, 2.5: 0.2 },
            2.0: { 20: 1.7, 10: 0.6, 5: 0.55, 2.5: 0.31 },
            3.0: { 20: 2, 10: 0.7, 5: 0.65, 2.5: 0.35 },
          },
        },
        matN: {
          170: {
            0.5: { 20: 1.05, 10: 0.28, 5: 0.18, 2.5: 0.12 },
            1.0: { 20: 1.3, 10: 0.4, 5: 0.3, 2.5: 0.16 },
            2.0: { 20: 1.4, 10: 0.5, 5: 0.45, 2.5: 0.25 },
            3.0: { 20: 1.7, 10: 0.58, 5: 0.53, 2.5: 0.28 },
          },
          210: {
            0.5: { 20: 1.2, 10: 0.32, 5: 0.2, 2.5: 0.13 },
            1.0: { 20: 1.45, 10: 0.45, 5: 0.33, 2.5: 0.18 },
            2.0: { 20: 1.6, 10: 0.55, 5: 0.5, 2.5: 0.28 },
            3.0: { 20: 1.9, 10: 0.65, 5: 0.6, 2.5: 0.32 },
          },
          280: {
            0.5: { 20: 1.25, 10: 0.35, 5: 0.22, 2.5: 0.14 },
            1.0: { 20: 1.5, 10: 0.5, 5: 0.36, 2.5: 0.2 },
            2.0: { 20: 1.7, 10: 0.6, 5: 0.55, 2.5: 0.31 },
            3.0: { 20: 2, 10: 0.7, 5: 0.65, 2.5: 0.35 },
          },
        },
      },
    },
    external_grooving: {
      matP: {
        210: {
          5.5: { 50: 0.16, 75: 0.12, 100: 0.08 },
          7.5: { 80: 0.23, 120: 0.18, 160: 0.12 },
          11.5: { 100: 0.32, 150: 0.26, 200: 0.16 },
          17: { 165: 0.36, 248: 0.3, 330: 0.18 },
          24: { 190: 0.36, 250: 0.34, 350: 0.26, 500: 0.18 },
          40: { 250: 0.3, 350: 0.24, 500: 0.16 },
        },
        280: {
          5.5: { 50: 0.14, 75: 0.11, 100: 0.07 },
          7.5: { 80: 0.2, 120: 0.16, 160: 0.1 },
          11.5: { 100: 0.3, 150: 0.24, 200: 0.15 },
          17: { 165: 0.32, 248: 0.26, 330: 0.16 },
          24: { 190: 0.3, 250: 0.28, 350: 0.24, 500: 0.15 },
          40: { 250: 0.28, 350: 0.22, 500: 0.14 },
        },
      },
      matK: {
        280: {
          5.5: { 50: 0.2, 75: 0.16, 100: 0.1 },
          7.5: { 80: 0.3, 120: 0.24, 160: 0.15 },
          11.5: { 100: 0.42, 150: 0.34, 200: 0.21 },
          17: { 165: 0.48, 248: 0.38, 330: 0.24 },
          24: { 190: 0.48, 250: 0.42, 350: 0.32, 500: 0.24 },
          40: { 250: 0.4, 350: 0.32, 500: 0.2 },
        },
      },
      matN: {
        280: {
          5.5: { 50: 0.2 },
          7.5: { 80: 0.3 },
          11.5: { 100: 0.42 },
          17: { 165: 0.48 },
          24: { 190: 0.48, 250: 0.42, 350: 0.32, 500: 0.24 },
          40: { 250: 0.4, 350: 0.32, 500: 0.2 },
        },
      },
    },
    internal_grooving: {
      matP: {
        "12x12": {
          60: { 3: 0.15, 5: 0.1, 10: 0.08, 15: 0.06, 20: 0.04 },
        },
        "16x16": {
          70: { 3: 0.18, 5: 0.16, 10: 0.12, 15: 0.08, 20: 0.06 },
          150: { 3: 0.16, 5: 0.12, 10: 0.1, 15: 0.06, 20: 0.04 },
        },
        "20x20": {
          80: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
          150: { 3: 0.18, 5: 0.16, 10: 0.12, 15: 0.08, 20: 0.04 },
        },
        "25x25": {
          100: { 3: 0.22, 5: 0.2, 10: 0.16, 15: 0.12, 20: 0.06 },
          200: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
        },
        "30x30": {
          150: { 3: 0.24, 5: 0.2, 10: 0.16, 15: 0.12, 20: 0.06 },
          250: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
        },
        "40x40": {
          150: { 3: 0.26, 5: 0.24, 10: 0.2, 15: 0.16, 20: 0.08 },
          200: { 3: 0.24, 5: 0.22, 10: 0.2, 15: 0.16, 20: 0.08 },
          300: { 3: 0.22, 5: 0.2, 10: 0.18, 15: 0.14, 20: 0.08 },
          500: { 3: 0.16, 5: 0.12, 10: 0.1, 15: 0.08, 20: 0.04 },
          800: { 3: 0.1, 5: 0.08, 10: 0.06, 15: 0.06, 20: 0.04 },
        },
        "60x60": {
          200: { 5: 0.3, 10: 0.26, 15: 0.24, 20: 0.16 },
          300: { 5: 0.28, 10: 0.24, 15: 0.2, 20: 0.16 },
          500: { 5: 0.26, 10: 0.24, 15: 0.2, 20: 0.16 },
          800: { 5: 0.2, 10: 0.18, 15: 0.16, 20: 0.12 },
          1000: { 5: 0.18, 10: 0.16, 15: 0.14, 20: 0.1 },
          1200: { 5: 0.14, 10: 0.12, 15: 0.1, 20: 0.08 },
        },
        "80x80": {
          300: { 5: 0.36, 10: 0.32, 15: 0.28, 20: 0.22 },
          500: { 5: 0.32, 10: 0.3, 15: 0.28, 20: 0.22 },
          800: { 5: 0.28, 10: 0.24, 15: 0.2, 20: 0.18 },
          1000: { 5: 0.22, 10: 0.2, 15: 0.16, 20: 0.12 },
          1200: { 5: 0.18, 10: 0.14, 15: 0.12, 20: 0.1 },
        },
      },
      matK: {
        "12x12": {
          60: { 3: 0.15, 5: 0.1, 10: 0.08, 15: 0.06, 20: 0.04 },
        },
        "16x16": {
          70: { 3: 0.18, 5: 0.16, 10: 0.12, 15: 0.08, 20: 0.06 },
          150: { 3: 0.16, 5: 0.12, 10: 0.1, 15: 0.06, 20: 0.04 },
        },
        "20x20": {
          80: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
          150: { 3: 0.18, 5: 0.16, 10: 0.12, 15: 0.08, 20: 0.04 },
        },
        "25x25": {
          100: { 3: 0.22, 5: 0.2, 10: 0.16, 15: 0.12, 20: 0.06 },
          200: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
        },
        "30x30": {
          150: { 3: 0.24, 5: 0.2, 10: 0.16, 15: 0.12, 20: 0.06 },
          250: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
        },
        "40x40": {
          150: { 3: 0.26, 5: 0.24, 10: 0.2, 15: 0.16, 20: 0.08 },
          200: { 3: 0.24, 5: 0.22, 10: 0.2, 15: 0.16, 20: 0.08 },
          300: { 3: 0.22, 5: 0.2, 10: 0.18, 15: 0.14, 20: 0.08 },
          500: { 3: 0.16, 5: 0.12, 10: 0.1, 15: 0.08, 20: 0.04 },
          800: { 3: 0.1, 5: 0.08, 10: 0.06, 15: 0.06, 20: 0.04 },
        },
        "60x60": {
          200: { 5: 0.3, 10: 0.26, 15: 0.24, 20: 0.16 },
          300: { 5: 0.28, 10: 0.24, 15: 0.2, 20: 0.16 },
          500: { 5: 0.26, 10: 0.24, 15: 0.2, 20: 0.16 },
          800: { 5: 0.2, 10: 0.18, 15: 0.16, 20: 0.12 },
          1000: { 5: 0.18, 10: 0.16, 15: 0.14, 20: 0.1 },
          1200: { 5: 0.14, 10: 0.12, 15: 0.1, 20: 0.08 },
        },
        "80x80": {
          300: { 5: 0.36, 10: 0.32, 15: 0.28, 20: 0.22 },
          500: { 5: 0.32, 10: 0.3, 15: 0.28, 20: 0.22 },
          800: { 5: 0.28, 10: 0.24, 15: 0.2, 20: 0.18 },
          1000: { 5: 0.22, 10: 0.2, 15: 0.16, 20: 0.12 },
          1200: { 5: 0.18, 10: 0.14, 15: 0.12, 20: 0.1 },
        },
      },
      matN: {
        "12x12": {
          60: { 3: 0.15, 5: 0.1, 10: 0.08, 15: 0.06, 20: 0.04 },
        },
        "16x16": {
          70: { 3: 0.18, 5: 0.16, 10: 0.12, 15: 0.08, 20: 0.06 },
          150: { 3: 0.16, 5: 0.12, 10: 0.1, 15: 0.06, 20: 0.04 },
        },
        "20x20": {
          80: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
          150: { 3: 0.18, 5: 0.16, 10: 0.12, 15: 0.08, 20: 0.04 },
        },
        "25x25": {
          100: { 3: 0.22, 5: 0.2, 10: 0.16, 15: 0.12, 20: 0.06 },
          200: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
        },
        "30x30": {
          150: { 3: 0.24, 5: 0.2, 10: 0.16, 15: 0.12, 20: 0.06 },
          250: { 3: 0.2, 5: 0.18, 10: 0.14, 15: 0.1, 20: 0.06 },
        },
        "40x40": {
          150: { 3: 0.26, 5: 0.24, 10: 0.2, 15: 0.16, 20: 0.08 },
          200: { 3: 0.24, 5: 0.22, 10: 0.2, 15: 0.16, 20: 0.08 },
          300: { 3: 0.22, 5: 0.2, 10: 0.18, 15: 0.14, 20: 0.08 },
          500: { 3: 0.16, 5: 0.12, 10: 0.1, 15: 0.08, 20: 0.04 },
          800: { 3: 0.1, 5: 0.08, 10: 0.06, 15: 0.06, 20: 0.04 },
        },
        "60x60": {
          200: { 5: 0.3, 10: 0.26, 15: 0.24, 20: 0.16 },
          300: { 5: 0.28, 10: 0.24, 15: 0.2, 20: 0.16 },
          500: { 5: 0.26, 10: 0.24, 15: 0.2, 20: 0.16 },
          800: { 5: 0.2, 10: 0.18, 15: 0.16, 20: 0.12 },
          1000: { 5: 0.18, 10: 0.16, 15: 0.14, 20: 0.1 },
          1200: { 5: 0.14, 10: 0.12, 15: 0.1, 20: 0.08 },
        },
        "80x80": {
          300: { 5: 0.36, 10: 0.32, 15: 0.28, 20: 0.22 },
          500: { 5: 0.32, 10: 0.3, 15: 0.28, 20: 0.22 },
          800: { 5: 0.28, 10: 0.24, 15: 0.2, 20: 0.18 },
          1000: { 5: 0.22, 10: 0.2, 15: 0.16, 20: 0.12 },
          1200: { 5: 0.18, 10: 0.14, 15: 0.12, 20: 0.1 },
        },
      },
    },
    drilling: {
      matP: {
        6: 0.06,
        8: 0.07,
        10: 0.08,
        12: 0.09,
        16: 0.12,
        20: 0.14,
        25: 0.16,
        30: 0.2,
        35: 0.2,
        40: 0.22,
        50: 0.23,
        60: 0.23,
      },
      matK: {
        6: 0.09,
        8: 0.1,
        10: 0.12,
        12: 0.14,
        16: 0.18,
        20: 0.22,
        25: 0.25,
        30: 0.32,
        35: 0.32,
        40: 0.35,
        50: 0.37,
        60: 0.37,
      },
      matN: {
        6: 0.09,
        8: 0.1,
        10: 0.12,
        12: 0.14,
        16: 0.18,
        20: 0.22,
        25: 0.25,
        30: 0.32,
        35: 0.32,
        40: 0.35,
        50: 0.37,
        60: 0.37,
      },
    },
    redrilling: {
      matP: { 25: 0.4, 30: 0.35, 40: 0.32, 50: 0.3, 60: 0.25, 70: 0.23, 75: 0.2 },
      matK: { 25: 0.64, 30: 0.56, 40: 0.5, 50: 0.48, 60: 0.4, 70: 0.36, 75: 0.32 },
      matN: { 25: 0.64, 30: 0.56, 40: 0.5, 50: 0.48, 60: 0.4, 70: 0.36, 75: 0.32 },
    },
    countersinking: {
      matP: { 20: 0.6, 25: 0.6, 31.5: 0.7, 40: 0.9, 50: 1, 63: 1.1, 80: 1.2 },
      matK: { 20: 0.9, 25: 1, 31.5: 1.1, 40: 1.2, 50: 1.3, 63: 1.5, 80: 1.7 },
      matN: { 20: 1.2, 25: 1.4, 31.5: 1.6, 40: 1.8, 50: 2, 63: 2.3, 80: 2.6 },
    },
    reaming: {
      matP: { 20: 0.45, 25: 0.5, 31.5: 0.55, 40: 0.65, 50: 0.75, 63: 0.85, 80: 0.95 },
      matK: { 20: 0.9, 25: 1, 31.5: 1.15, 40: 1.25, 50: 1.4, 63: 1.6, 80: 1.75 },
      matN: { 20: 1, 25: 1.1, 31.5: 1.25, 40: 1.4, 50: 1.5, 63: 1.7, 80: 1.9 },
    },
  },
  cuttingSpeed: {
    permissibleSpeed: {
      typelunet: {
        // V, м/мин
        rolikovi: {
          1000: 100,
          2000: 90,
          3000: 95,
          5000: 82,
          7000: 67,
          10000: 60,
          15000: 53,
          20000: 48,
          30000: 45,
        },
        skolgenia: {
          1000: 42,
          2000: 38,
          3000: 33,
          5000: 30,
          7000: 25,
          10000: 23,
          15000: 19,
          20000: 17,
          30000: 15,
        },
      },
      typecentr: {
        //n, об/мин
        gestk: {
          1000: 95,
          2000: 80,
          3000: 68,
          5000: 50,
          7000: 43,
          10000: 33,
          15000: 23,
          20000: 18,
          30000: 13,
        },
      },
    },
    matP: {
      tvsplav: {
        45: {
          0.6: {
            0.07: 221,
            0.12: 212,
            0.16: 199,
            0.2: 190,
            0.25: 180,
            0.31: 171,
            0.4: 157,
            0.5: 144,
            0.63: 136,
            0.8: 124,
            1: 112,
            1.2: 101,
          },
          1: {
            0.07: 212,
            0.12: 199,
            0.16: 190,
            0.2: 180,
            0.25: 171,
            0.31: 157,
            0.4: 144,
            0.5: 136,
            0.63: 124,
            0.8: 112,
            1: 101,
            1.2: 90,
            1.6: 82,
          },
          2: {
            0.07: 199,
            0.12: 190,
            0.16: 180,
            0.2: 171,
            0.25: 157,
            0.31: 144,
            0.4: 136,
            0.5: 124,
            0.63: 112,
            0.8: 101,
            1: 90,
            1.2: 82,
            1.6: 73,
            2.0: 67,
          },
          3.5: {
            0.07: 190,
            0.12: 180,
            0.16: 171,
            0.2: 157,
            0.25: 144,
            0.31: 136,
            0.4: 124,
            0.5: 112,
            0.63: 101,
            0.8: 90,
            1: 82,
            1.2: 73,
            1.6: 67,
            2.0: 61,
            2.5: 55,
          },
          6: {
            0.07: 180,
            0.12: 171,
            0.16: 157,
            0.2: 144,
            0.25: 136,
            0.31: 124,
            0.4: 112,
            0.5: 101,
            0.63: 90,
            0.8: 82,
            1: 73,
            1.2: 67,
            1.6: 61,
            2.0: 55,
            2.5: 52,
          },
          10: {
            0.07: 171,
            0.12: 157,
            0.16: 144,
            0.2: 136,
            0.25: 124,
            0.31: 112,
            0.4: 101,
            0.5: 90,
            0.63: 82,
            0.8: 73,
            1: 67,
            1.2: 61,
            1.6: 55,
            2.0: 52,
          },
          20: {
            0.07: 157,
            0.12: 144,
            0.16: 136,
            0.2: 124,
            0.25: 112,
            0.31: 101,
            0.4: 90,
            0.5: 82,
            0.63: 73,
            0.8: 67,
            1: 61,
            1.2: 55,
            1.6: 52,
          },
          30: {
            0.07: 144,
            0.12: 136,
            0.16: 124,
            0.2: 112,
            0.25: 101,
            0.31: 90,
            0.4: 82,
            0.5: 73,
            0.63: 67,
            0.8: 61,
            1: 55,
            1.2: 52,
          },
        },
        60: {
          0.6: {
            0.07: 205,
            0.12: 195,
            0.16: 183,
            0.2: 170,
            0.25: 165,
            0.31: 157,
            0.4: 144,
            0.5: 132,
            0.63: 125,
            0.8: 113,
            1: 102,
            1.2: 93,
          },
          1: {
            0.07: 195,
            0.12: 183,
            0.16: 170,
            0.2: 165,
            0.25: 157,
            0.31: 144,
            0.4: 132,
            0.5: 125,
            0.63: 113,
            0.8: 102,
            1: 93,
            1.2: 82,
            1.6: 76,
          },
          2: {
            0.07: 183,
            0.12: 170,
            0.16: 165,
            0.2: 157,
            0.25: 144,
            0.31: 132,
            0.4: 125,
            0.5: 113,
            0.63: 102,
            0.8: 93,
            1: 82,
            1.2: 76,
            1.6: 67,
            2: 61,
          },
          3.5: {
            0.07: 170,
            0.12: 165,
            0.16: 157,
            0.2: 144,
            0.25: 132,
            0.31: 125,
            0.4: 113,
            0.5: 102,
            0.63: 93,
            0.8: 82,
            1: 76,
            1.2: 67,
            1.6: 61,
            2: 56,
            2.5: 51,
          },
          6: {
            0.07: 165,
            0.12: 157,
            0.16: 144,
            0.2: 132,
            0.25: 125,
            0.31: 113,
            0.4: 102,
            0.5: 93,
            0.63: 82,
            0.8: 76,
            1: 67,
            1.2: 61,
            1.6: 56,
            2: 51,
            2.5: 48,
          },
          10: {
            0.07: 157,
            0.12: 144,
            0.16: 132,
            0.2: 125,
            0.25: 113,
            0.31: 102,
            0.4: 93,
            0.5: 82,
            0.63: 76,
            0.8: 67,
            1: 61,
            1.2: 56,
            1.6: 51,
            2: 48,
          },
          20: {
            0.07: 144,
            0.12: 132,
            0.16: 125,
            0.2: 113,
            0.25: 102,
            0.31: 93,
            0.4: 82,
            0.5: 76,
            0.63: 67,
            0.8: 61,
            1: 56,
            1.2: 51,
            1.6: 48,
          },
          30: {
            0.07: 132,
            0.12: 125,
            0.16: 113,
            0.2: 102,
            0.25: 93,
            0.31: 82,
            0.4: 76,
            0.5: 67,
            0.63: 61,
            0.8: 56,
            1: 51,
            1.2: 48,
          },
        },
        90: {
          0.6: {
            0.07: 180,
            0.12: 171,
            0.16: 161,
            0.2: 153,
            0.25: 145,
            0.31: 138,
            0.4: 127,
            0.5: 116,
            0.63: 110,
            0.8: 99,
            1: 90,
            1.2: 81,
          },
          1: {
            0.07: 171,
            0.12: 161,
            0.16: 153,
            0.2: 145,
            0.25: 138,
            0.31: 127,
            0.4: 116,
            0.5: 110,
            0.63: 99,
            0.8: 90,
            1: 81,
            1.2: 73,
            1.6: 67,
          },
          2: {
            0.07: 161,
            0.12: 153,
            0.16: 145,
            0.2: 138,
            0.25: 127,
            0.31: 116,
            0.4: 110,
            0.5: 99,
            0.63: 90,
            0.8: 81,
            1: 73,
            1.2: 67,
            1.6: 58,
            2: 54,
          },
          3.5: {
            0.07: 153,
            0.12: 145,
            0.16: 138,
            0.2: 127,
            0.25: 116,
            0.31: 110,
            0.4: 99,
            0.5: 90,
            0.63: 81,
            0.8: 73,
            1: 67,
            1.2: 58,
            1.6: 54,
            2: 49,
            2.5: 44,
          },
          6: {
            0.07: 145,
            0.12: 138,
            0.16: 127,
            0.2: 116,
            0.25: 110,
            0.31: 99,
            0.4: 90,
            0.5: 81,
            0.63: 73,
            0.8: 67,
            1: 58,
            1.2: 54,
            1.6: 49,
            2: 44,
            2.5: 42,
          },
          10: {
            0.07: 138,
            0.12: 127,
            0.16: 116,
            0.2: 110,
            0.25: 99,
            0.31: 90,
            0.4: 81,
            0.5: 73,
            0.63: 67,
            0.8: 58,
            1: 54,
            1.2: 49,
            1.6: 44,
            2: 42,
          },
          20: {
            0.07: 127,
            0.12: 116,
            0.16: 110,
            0.2: 99,
            0.25: 90,
            0.31: 81,
            0.4: 73,
            0.5: 67,
            0.63: 58,
            0.8: 54,
            1: 49,
            1.2: 44,
            1.6: 42,
          },
          30: {
            0.07: 116,
            0.12: 110,
            0.16: 99,
            0.2: 90,
            0.25: 81,
            0.31: 73,
            0.4: 67,
            0.5: 58,
            0.63: 54,
            0.8: 49,
            1: 44,
            1.2: 42,
          },
        },
      },
      bistrorez: {
        45: {
          0.6: {
            0.06: 145,
            0.1: 133,
            0.12: 126,
            0.16: 114,
            0.2: 106,
            0.25: 100,
            0.31: 93,
            0.4: 73,
            0.5: 63,
            0.63: 53,
            0.8: 47,
            1: 39,
            1.2: 33,
          },
          1: {
            0.06: 133,
            0.1: 126,
            0.12: 114,
            0.16: 106,
            0.2: 100,
            0.25: 93,
            0.31: 73,
            0.4: 63,
            0.5: 53,
            0.63: 47,
            0.8: 39,
            1: 33,
            1.2: 28,
            1.6: 25,
          },
          2: {
            0.06: 126,
            0.1: 114,
            0.12: 106,
            0.16: 100,
            0.2: 93,
            0.25: 73,
            0.31: 63,
            0.4: 53,
            0.5: 47,
            0.63: 39,
            0.8: 33,
            1: 28,
            1.2: 25,
            1.6: 22,
            2: 19,
          },
          3.5: {
            0.06: 114,
            0.1: 106,
            0.12: 100,
            0.16: 93,
            0.2: 73,
            0.25: 63,
            0.31: 53,
            0.4: 47,
            0.5: 39,
            0.63: 33,
            0.8: 28,
            1: 25,
            1.2: 22,
            1.6: 19,
            2: 17,
            2.5: 15,
          },
          6: {
            0.06: 106,
            0.1: 100,
            0.12: 93,
            0.16: 73,
            0.2: 63,
            0.25: 53,
            0.31: 47,
            0.4: 39,
            0.5: 33,
            0.63: 28,
            0.8: 25,
            1: 22,
            1.2: 19,
            1.6: 17,
            2: 15,
          },
          10: {
            0.06: 100,
            0.1: 93,
            0.12: 73,
            0.16: 63,
            0.2: 53,
            0.25: 47,
            0.31: 39,
            0.4: 33,
            0.5: 28,
            0.63: 25,
            0.8: 22,
            1: 19,
            1.2: 17,
            1.6: 15,
          },
          20: {
            0.06: 93,
            0.1: 73,
            0.12: 63,
            0.16: 53,
            0.2: 47,
            0.25: 39,
            0.31: 33,
            0.4: 28,
            0.5: 25,
            0.63: 22,
            0.8: 19,
            1: 17,
            1.2: 15,
          },
          30: {
            0.06: 73,
            0.1: 63,
            0.12: 53,
            0.16: 47,
            0.2: 39,
            0.25: 33,
            0.31: 28,
            0.4: 25,
            0.5: 22,
            0.63: 19,
            0.8: 17,
            1: 15,
          },
        },
        60: {
          0.6: {
            0.06: 118,
            0.1: 112,
            0.12: 106,
            0.16: 95,
            0.2: 84,
            0.25: 80,
            0.31: 75,
            0.4: 61,
            0.5: 53,
            0.63: 45,
            0.8: 39,
            1: 33,
            1.2: 28,
          },
          1: {
            0.06: 112,
            0.1: 106,
            0.12: 95,
            0.16: 84,
            0.2: 80,
            0.25: 75,
            0.31: 61,
            0.4: 53,
            0.5: 45,
            0.63: 39,
            0.8: 33,
            1: 28,
            1.2: 24,
            1.6: 21,
          },
          2: {
            0.06: 106,
            0.1: 95,
            0.12: 84,
            0.16: 80,
            0.2: 75,
            0.25: 61,
            0.31: 53,
            0.4: 45,
            0.5: 39,
            0.63: 33,
            0.8: 28,
            1: 24,
            1.2: 21,
            1.6: 19,
            2: 16,
          },
          3.5: {
            0.06: 95,
            0.1: 84,
            0.12: 80,
            0.16: 75,
            0.2: 61,
            0.25: 53,
            0.31: 45,
            0.4: 39,
            0.5: 33,
            0.63: 28,
            0.8: 24,
            1: 21,
            1.2: 19,
            1.6: 16,
            2: 14,
            2.5: 13,
          },
          6: {
            0.06: 84,
            0.1: 80,
            0.12: 75,
            0.16: 61,
            0.2: 53,
            0.25: 45,
            0.31: 39,
            0.4: 33,
            0.5: 28,
            0.63: 24,
            0.8: 21,
            1: 19,
            1.2: 16,
            1.6: 14,
            2: 13,
          },
          10: {
            0.06: 80,
            0.1: 75,
            0.12: 61,
            0.16: 53,
            0.2: 45,
            0.25: 39,
            0.31: 33,
            0.4: 28,
            0.5: 24,
            0.63: 21,
            0.8: 19,
            1: 16,
            1.2: 14,
            1.6: 13,
          },
          20: {
            0.06: 75,
            0.1: 61,
            0.12: 53,
            0.16: 45,
            0.2: 39,
            0.25: 33,
            0.31: 28,
            0.4: 24,
            0.5: 21,
            0.63: 19,
            0.8: 16,
            1: 14,
            1.2: 13,
          },
          30: {
            0.06: 61,
            0.1: 53,
            0.12: 45,
            0.16: 39,
            0.2: 33,
            0.25: 28,
            0.31: 24,
            0.4: 21,
            0.5: 19,
            0.63: 16,
            0.8: 14,
            1: 13,
          },
        },
        90: {
          0.6: {
            0.06: 92,
            0.1: 88,
            0.12: 84,
            0.16: 76,
            0.2: 71,
            0.25: 67,
            0.31: 53,
            0.4: 49,
            0.5: 42,
            0.63: 36,
            0.8: 31,
            1: 26,
            1.2: 22,
          },
          1: {
            0.06: 88,
            0.1: 84,
            0.12: 76,
            0.16: 71,
            0.2: 67,
            0.25: 53,
            0.31: 49,
            0.4: 42,
            0.5: 36,
            0.63: 31,
            0.8: 26,
            1: 22,
            1.2: 19,
            1.6: 17,
          },
          2: {
            0.06: 84,
            0.1: 76,
            0.12: 71,
            0.16: 67,
            0.2: 53,
            0.25: 49,
            0.31: 42,
            0.4: 36,
            0.5: 31,
            0.63: 26,
            0.8: 22,
            1: 19,
            1.2: 17,
            1.6: 15,
            2: 12,
          },
          3.5: {
            0.06: 76,
            0.1: 71,
            0.12: 67,
            0.16: 53,
            0.2: 49,
            0.25: 42,
            0.31: 36,
            0.4: 31,
            0.5: 26,
            0.63: 22,
            0.8: 19,
            1: 17,
            1.2: 15,
            1.6: 12,
            2: 10,
            2.5: 9.8,
          },
          6: {
            0.06: 71,
            0.1: 67,
            0.12: 53,
            0.16: 49,
            0.2: 42,
            0.25: 36,
            0.31: 31,
            0.4: 26,
            0.5: 22,
            0.63: 19,
            0.8: 17,
            1: 15,
            1.2: 12,
            1.6: 10,
            2: 9.8,
          },
          10: {
            0.06: 67,
            0.1: 53,
            0.12: 49,
            0.16: 42,
            0.2: 36,
            0.25: 31,
            0.31: 26,
            0.4: 22,
            0.5: 19,
            0.63: 17,
            0.8: 15,
            1: 12,
            1.2: 10,
            1.6: 9.8,
          },
          20: {
            0.06: 53,
            0.1: 49,
            0.12: 42,
            0.16: 36,
            0.2: 31,
            0.25: 26,
            0.31: 22,
            0.4: 19,
            0.5: 17,
            0.63: 15,
            0.8: 12,
            1: 10,
            1.2: 9.8,
          },
          30: {
            0.06: 49,
            0.1: 42,
            0.12: 36,
            0.16: 31,
            0.2: 26,
            0.25: 22,
            0.31: 19,
            0.4: 17,
            0.5: 15,
            0.63: 12,
            0.8: 10,
            1: 9.8,
          },
        },
      },
    },
    matK: {
      tvsplav: {
        45: {
          0.6: {
            0.12: 181,
            0.16: 175,
            0.2: 164,
            0.25: 155,
            0.31: 146,
            0.4: 138,
            0.5: 130,
            0.63: 122,
            0.8: 113,
            1: 106,
            1.2: 99,
          },
          1: {
            0.12: 175,
            0.16: 164,
            0.2: 155,
            0.25: 146,
            0.31: 138,
            0.4: 130,
            0.5: 122,
            0.63: 113,
            0.8: 106,
            1: 99,
            1.2: 91,
          },
          1.5: {
            0.12: 164,
            0.16: 155,
            0.2: 146,
            0.25: 138,
            0.31: 130,
            0.4: 122,
            0.5: 113,
            0.63: 106,
            0.8: 99,
            1: 91,
            1.2: 84,
          },
          2.5: {
            0.12: 155,
            0.16: 146,
            0.2: 138,
            0.25: 130,
            0.31: 122,
            0.4: 113,
            0.5: 106,
            0.63: 99,
            0.8: 91,
            1: 84,
            1.2: 77,
          },
          3.6: {
            0.12: 146,
            0.16: 138,
            0.2: 130,
            0.25: 122,
            0.31: 113,
            0.4: 106,
            0.5: 99,
            0.63: 91,
            0.8: 84,
            1: 77,
            1.2: 71,
          },
          6: {
            0.12: 138,
            0.16: 130,
            0.2: 122,
            0.25: 113,
            0.31: 106,
            0.4: 99,
            0.5: 91,
            0.63: 84,
            0.8: 77,
            1: 71,
            1.2: 66,
          },
          10: {
            0.12: 130,
            0.16: 122,
            0.2: 113,
            0.25: 106,
            0.31: 99,
            0.4: 91,
            0.5: 84,
            0.63: 77,
            0.8: 71,
            1: 66,
            1.2: 59,
          },
          17: {
            0.12: 122,
            0.16: 113,
            0.2: 106,
            0.25: 99,
            0.31: 91,
            0.4: 84,
            0.5: 77,
            0.63: 71,
            0.8: 66,
            1: 59,
            1.2: 55,
          },
          30: {
            0.12: 113,
            0.16: 106,
            0.2: 99,
            0.25: 91,
            0.31: 84,
            0.4: 77,
            0.5: 71,
            0.63: 66,
            0.8: 59,
            1: 55,
            1.2: 51,
          },
        },
        60: {
          0.6: {
            0.12: 165,
            0.16: 155,
            0.2: 145,
            0.25: 137,
            0.31: 129,
            0.4: 122,
            0.5: 116,
            0.63: 108,
            0.8: 101,
            1: 93,
            1.2: 87,
          },
          1: {
            0.12: 155,
            0.16: 145,
            0.2: 137,
            0.25: 129,
            0.31: 122,
            0.4: 116,
            0.5: 108,
            0.63: 101,
            0.8: 93,
            1: 87,
            1.2: 81,
          },
          1.5: {
            0.12: 145,
            0.16: 137,
            0.2: 129,
            0.25: 122,
            0.31: 116,
            0.4: 108,
            0.5: 101,
            0.63: 93,
            0.8: 87,
            1: 81,
            1.2: 74,
          },
          2.5: {
            0.12: 137,
            0.16: 129,
            0.2: 122,
            0.25: 116,
            0.31: 108,
            0.4: 101,
            0.5: 93,
            0.63: 87,
            0.8: 81,
            1: 74,
            1.2: 69,
          },
          3.6: {
            0.12: 129,
            0.16: 122,
            0.2: 116,
            0.25: 108,
            0.31: 101,
            0.4: 93,
            0.5: 87,
            0.63: 81,
            0.8: 74,
            1: 69,
            1.2: 63,
          },
          6: {
            0.12: 122,
            0.16: 116,
            0.2: 108,
            0.25: 101,
            0.31: 93,
            0.4: 87,
            0.5: 81,
            0.63: 74,
            0.8: 69,
            1: 63,
            1.2: 58,
          },
          10: {
            0.12: 116,
            0.16: 108,
            0.2: 101,
            0.25: 93,
            0.31: 87,
            0.4: 81,
            0.5: 74,
            0.63: 69,
            0.8: 63,
            1: 58,
            1.2: 53,
          },
          17: {
            0.12: 108,
            0.16: 101,
            0.2: 93,
            0.25: 87,
            0.31: 81,
            0.4: 74,
            0.5: 69,
            0.63: 63,
            0.8: 58,
            1: 53,
            1.2: 49,
          },
          30: {
            0.12: 101,
            0.16: 93,
            0.2: 87,
            0.25: 81,
            0.31: 74,
            0.4: 69,
            0.5: 63,
            0.63: 58,
            0.8: 53,
            1: 49,
            1.2: 44,
          },
        },
        90: {
          0.6: {
            0.12: 137,
            0.16: 128,
            0.2: 121,
            0.25: 113,
            0.31: 107,
            0.4: 101,
            0.5: 95,
            0.63: 90,
            0.8: 84,
            1: 77,
            1.2: 72,
          },
          1: {
            0.12: 128,
            0.16: 121,
            0.2: 113,
            0.25: 107,
            0.31: 101,
            0.4: 95,
            0.5: 90,
            0.63: 84,
            0.8: 77,
            1: 72,
            1.2: 67,
          },
          1.5: {
            0.12: 121,
            0.16: 113,
            0.2: 107,
            0.25: 101,
            0.31: 95,
            0.4: 90,
            0.5: 84,
            0.63: 77,
            0.8: 72,
            1: 67,
            1.2: 61,
          },
          2.5: {
            0.12: 113,
            0.16: 107,
            0.2: 101,
            0.25: 95,
            0.31: 90,
            0.4: 84,
            0.5: 77,
            0.63: 72,
            0.8: 67,
            1: 61,
            1.2: 57,
          },
          3.6: {
            0.12: 107,
            0.16: 101,
            0.2: 95,
            0.25: 90,
            0.31: 84,
            0.4: 77,
            0.5: 72,
            0.63: 67,
            0.8: 61,
            1: 57,
            1.2: 52,
          },
          6: {
            0.12: 101,
            0.16: 95,
            0.2: 90,
            0.25: 84,
            0.31: 77,
            0.4: 72,
            0.5: 67,
            0.63: 61,
            0.8: 57,
            1: 52,
            1.2: 49,
          },
          10: {
            0.12: 95,
            0.16: 90,
            0.2: 84,
            0.25: 77,
            0.31: 72,
            0.4: 67,
            0.5: 61,
            0.63: 57,
            0.8: 52,
            1: 49,
            1.2: 43,
          },
          17: {
            0.12: 90,
            0.16: 84,
            0.2: 77,
            0.25: 72,
            0.31: 67,
            0.4: 61,
            0.5: 57,
            0.63: 52,
            0.8: 49,
            1: 43,
            1.2: 40,
          },
          30: {
            0.12: 84,
            0.16: 77,
            0.2: 72,
            0.25: 67,
            0.31: 61,
            0.4: 57,
            0.5: 52,
            0.63: 49,
            0.8: 43,
            1: 40,
            1.2: 37,
          },
        },
      },
    },
    matN: {
      tvsplav: {
        45: {
          0.8: {
            0.12: 412,
            0.16: 388,
            0.2: 366,
            0.25: 344,
            0.31: 320,
            0.4: 317,
            0.5: 305,
            0.63: 292,
            0.8: 277,
            1: 252,
            1.25: 243,
          },
          1.1: {
            0.12: 388,
            0.16: 366,
            0.2: 344,
            0.25: 320,
            0.31: 317,
            0.4: 305,
            0.5: 292,
            0.63: 277,
            0.8: 252,
            1: 243,
            1.25: 227,
            1.6: 210,
          },
          1.6: {
            0.12: 366,
            0.16: 344,
            0.2: 320,
            0.25: 317,
            0.31: 305,
            0.4: 292,
            0.5: 277,
            0.63: 252,
            0.8: 243,
            1: 227,
            1.25: 210,
            1.6: 192,
            2: 171,
          },
          2.2: {
            0.12: 344,
            0.16: 320,
            0.2: 317,
            0.25: 305,
            0.31: 292,
            0.4: 277,
            0.5: 252,
            0.63: 243,
            0.8: 227,
            1: 210,
            1.25: 192,
            1.6: 171,
            2: 155,
            2.5: 142,
          },
          3.3: {
            0.12: 320,
            0.16: 317,
            0.2: 305,
            0.25: 292,
            0.31: 277,
            0.4: 252,
            0.5: 243,
            0.63: 227,
            0.8: 210,
            1: 192,
            1.25: 171,
            1.6: 155,
            2: 142,
            2.5: 130,
          },
          5.5: {
            0.12: 317,
            0.16: 305,
            0.2: 292,
            0.25: 277,
            0.31: 252,
            0.4: 243,
            0.5: 227,
            0.63: 210,
            0.8: 192,
            1: 171,
            1.25: 155,
            1.6: 142,
            2: 130,
            2.5: 119,
          },
          8.5: {
            0.12: 305,
            0.16: 292,
            0.2: 277,
            0.25: 252,
            0.31: 243,
            0.4: 227,
            0.5: 210,
            0.63: 192,
            0.8: 171,
            1: 155,
            1.25: 142,
            1.6: 130,
            2: 119,
          },
          13: {
            0.12: 292,
            0.16: 277,
            0.2: 252,
            0.25: 243,
            0.31: 227,
            0.4: 210,
            0.5: 192,
            0.63: 171,
            0.8: 155,
            1: 142,
            1.25: 130,
            1.6: 119,
          },
          22: {
            0.12: 277,
            0.16: 252,
            0.2: 243,
            0.25: 227,
            0.31: 210,
            0.4: 192,
            0.5: 171,
            0.63: 155,
            0.8: 142,
            1: 130,
            1.25: 119,
          },
        },
        60: {
          0.8: {
            0.12: 378,
            0.16: 356,
            0.2: 336,
            0.25: 315,
            0.31: 302,
            0.4: 290,
            0.5: 280,
            0.63: 267,
            0.8: 254,
            1: 231,
            1.25: 223,
          },
          1.1: {
            0.12: 356,
            0.16: 336,
            0.2: 315,
            0.25: 302,
            0.31: 290,
            0.4: 280,
            0.5: 267,
            0.63: 254,
            0.8: 231,
            1: 223,
            1.25: 208,
            1.6: 193,
          },
          1.6: {
            0.12: 336,
            0.16: 315,
            0.2: 302,
            0.25: 290,
            0.31: 280,
            0.4: 267,
            0.5: 254,
            0.63: 231,
            0.8: 223,
            1: 208,
            1.25: 193,
            1.6: 176,
            2: 157,
          },
          2.2: {
            0.12: 315,
            0.16: 302,
            0.2: 290,
            0.25: 280,
            0.31: 267,
            0.4: 254,
            0.5: 231,
            0.63: 223,
            0.8: 208,
            1: 193,
            1.25: 176,
            1.6: 157,
            2: 142,
            2.5: 130,
          },
          3.3: {
            0.12: 302,
            0.16: 290,
            0.2: 280,
            0.25: 267,
            0.31: 254,
            0.4: 231,
            0.5: 223,
            0.63: 208,
            0.8: 193,
            1: 176,
            1.25: 157,
            1.6: 142,
            2: 130,
            2.5: 120,
          },
          5.5: {
            0.12: 290,
            0.16: 280,
            0.2: 267,
            0.25: 254,
            0.31: 231,
            0.4: 223,
            0.5: 208,
            0.63: 193,
            0.8: 176,
            1: 157,
            1.25: 142,
            1.6: 130,
            2: 120,
            2.5: 109,
          },
          8.5: {
            0.12: 280,
            0.16: 267,
            0.2: 254,
            0.25: 231,
            0.31: 223,
            0.4: 208,
            0.5: 193,
            0.63: 176,
            0.8: 157,
            1: 142,
            1.25: 130,
            1.6: 120,
            2: 109,
          },
          13: {
            0.12: 267,
            0.16: 254,
            0.2: 231,
            0.25: 223,
            0.31: 208,
            0.4: 193,
            0.5: 176,
            0.63: 157,
            0.8: 142,
            1: 130,
            1.25: 120,
            1.6: 109,
          },
          22: {
            0.12: 254,
            0.16: 231,
            0.2: 223,
            0.25: 208,
            0.31: 193,
            0.4: 176,
            0.5: 157,
            0.63: 142,
            0.8: 130,
            1: 120,
            1.25: 109,
          },
        },
        90: {
          0.8: {
            0.12: 332,
            0.16: 314,
            0.2: 295,
            0.25: 277,
            0.31: 265,
            0.4: 255,
            0.5: 246,
            0.63: 235,
            0.8: 224,
            1: 204,
            1.25: 195,
          },
          1.1: {
            0.12: 314,
            0.16: 295,
            0.2: 277,
            0.25: 265,
            0.31: 255,
            0.4: 246,
            0.5: 235,
            0.63: 224,
            0.8: 204,
            1: 195,
            1.25: 185,
            1.6: 170,
          },
          1.6: {
            0.12: 295,
            0.16: 277,
            0.2: 265,
            0.25: 255,
            0.31: 246,
            0.4: 235,
            0.5: 224,
            0.63: 204,
            0.8: 195,
            1: 185,
            1.25: 170,
            1.6: 155,
            2: 138,
          },
          2.2: {
            0.12: 277,
            0.16: 265,
            0.2: 255,
            0.25: 246,
            0.31: 235,
            0.4: 224,
            0.5: 204,
            0.63: 195,
            0.8: 185,
            1: 170,
            1.25: 155,
            1.6: 138,
            2: 125,
            2.5: 114,
          },
          3.3: {
            0.12: 265,
            0.16: 255,
            0.2: 246,
            0.25: 235,
            0.31: 224,
            0.4: 204,
            0.5: 195,
            0.63: 185,
            0.8: 170,
            1: 155,
            1.25: 138,
            1.6: 125,
            2: 114,
            2.5: 105,
          },
          5.5: {
            0.12: 255,
            0.16: 246,
            0.2: 235,
            0.25: 224,
            0.31: 204,
            0.4: 195,
            0.5: 185,
            0.63: 170,
            0.8: 155,
            1: 138,
            1.25: 125,
            1.6: 114,
            2: 105,
            2.5: 96,
          },
          8.5: {
            0.12: 246,
            0.16: 235,
            0.2: 224,
            0.25: 204,
            0.31: 195,
            0.4: 185,
            0.5: 170,
            0.63: 155,
            0.8: 138,
            1: 125,
            1.25: 114,
            1.6: 105,
            2: 96,
          },
          13: {
            0.12: 235,
            0.16: 224,
            0.2: 204,
            0.25: 195,
            0.31: 185,
            0.4: 170,
            0.5: 155,
            0.63: 138,
            0.8: 125,
            1: 114,
            1.25: 105,
            1.6: 96,
          },
          22: {
            0.12: 224,
            0.16: 224,
            0.2: 195,
            0.25: 185,
            0.31: 170,
            0.4: 155,
            0.5: 138,
            0.63: 125,
            0.8: 114,
            1: 105,
            1.25: 96,
          },
        },
      },
      bistrorez: {
        45: {
          0.8: {
            0.12: 190,
            0.16: 181,
            0.2: 167,
            0.25: 160,
            0.31: 150,
            0.4: 143,
            0.5: 130,
            0.63: 120,
            0.8: 108,
            1: 99,
            1.25: 89,
          },
          1.5: {
            0.12: 181,
            0.16: 167,
            0.2: 160,
            0.25: 150,
            0.31: 143,
            0.4: 130,
            0.5: 120,
            0.63: 108,
            0.8: 99,
            1: 89,
            1.25: 83,
            1.6: 73,
          },
          2.5: {
            0.12: 167,
            0.16: 160,
            0.2: 150,
            0.25: 143,
            0.31: 130,
            0.4: 120,
            0.5: 108,
            0.63: 99,
            0.8: 89,
            1: 83,
            1.25: 73,
            1.6: 68,
            2: 59,
          },
          5.5: {
            0.12: 160,
            0.16: 150,
            0.2: 143,
            0.25: 130,
            0.31: 120,
            0.4: 108,
            0.5: 99,
            0.63: 89,
            0.8: 83,
            1: 73,
            1.25: 68,
            1.6: 59,
            2: 54,
            2.5: 49,
          },
          9: {
            0.12: 150,
            0.16: 143,
            0.2: 130,
            0.25: 120,
            0.31: 108,
            0.4: 99,
            0.5: 89,
            0.63: 83,
            0.8: 73,
            1: 68,
            1.25: 59,
            1.6: 54,
            2: 49,
            2.5: 43,
            3.1: 39,
          },
          20: {
            0.12: 143,
            0.16: 130,
            0.2: 120,
            0.25: 108,
            0.31: 99,
            0.4: 89,
            0.5: 83,
            0.63: 73,
            0.8: 68,
            1: 59,
            1.25: 54,
            1.6: 49,
            2: 43,
            2.5: 39,
            3.1: 37,
          },
        },
        60: {
          0.8: {
            0.12: 168,
            0.16: 161,
            0.2: 148,
            0.25: 140,
            0.31: 133,
            0.4: 126,
            0.5: 115,
            0.63: 106,
            0.8: 95,
            1: 87,
            1.25: 79,
          },
          1.5: {
            0.12: 161,
            0.16: 148,
            0.2: 140,
            0.25: 133,
            0.31: 126,
            0.4: 115,
            0.5: 106,
            0.63: 95,
            0.8: 87,
            1: 79,
            1.25: 73,
            1.6: 66,
          },
          2.5: {
            0.12: 148,
            0.16: 140,
            0.2: 133,
            0.25: 126,
            0.31: 115,
            0.4: 106,
            0.5: 95,
            0.63: 87,
            0.8: 79,
            1: 73,
            1.25: 66,
            1.6: 60,
            2: 52,
          },
          5.5: {
            0.12: 140,
            0.16: 133,
            0.2: 126,
            0.25: 115,
            0.31: 106,
            0.4: 95,
            0.5: 87,
            0.63: 79,
            0.8: 73,
            1: 66,
            1.25: 60,
            1.6: 52,
            2: 47,
            2.5: 43,
          },
          9: {
            0.12: 133,
            0.16: 126,
            0.2: 115,
            0.25: 106,
            0.31: 95,
            0.4: 87,
            0.5: 79,
            0.63: 73,
            0.8: 66,
            1: 60,
            1.25: 52,
            1.6: 47,
            2: 43,
            2.5: 39,
            3.1: 35,
          },
          20: {
            0.12: 126,
            0.16: 115,
            0.2: 106,
            0.25: 95,
            0.31: 87,
            0.4: 79,
            0.5: 73,
            0.63: 66,
            0.8: 60,
            1: 52,
            1.25: 47,
            1.6: 43,
            2: 39,
            2.5: 35,
            3.1: 32,
          },
        },
        90: {
          0.8: {
            0.12: 140,
            0.16: 133,
            0.2: 123,
            0.25: 118,
            0.31: 110,
            0.4: 105,
            0.5: 95,
            0.63: 87,
            0.8: 80,
            1: 73,
            1.25: 65,
          },
          1.5: {
            0.12: 133,
            0.16: 123,
            0.2: 118,
            0.25: 110,
            0.31: 105,
            0.4: 95,
            0.5: 87,
            0.63: 80,
            0.8: 73,
            1: 65,
            1.25: 60,
            1.6: 55,
          },
          2.5: {
            0.12: 123,
            0.16: 118,
            0.2: 110,
            0.25: 105,
            0.31: 95,
            0.4: 87,
            0.5: 80,
            0.63: 73,
            0.8: 65,
            1: 60,
            1.25: 55,
            1.6: 50,
            2: 43,
          },
          5.5: {
            0.12: 118,
            0.16: 110,
            0.2: 105,
            0.25: 95,
            0.31: 87,
            0.4: 80,
            0.5: 73,
            0.63: 65,
            0.8: 60,
            1: 55,
            1.25: 50,
            1.6: 43,
            2: 40,
            2.5: 36,
          },
          9: {
            0.12: 110,
            0.16: 105,
            0.2: 95,
            0.25: 87,
            0.31: 80,
            0.4: 73,
            0.5: 65,
            0.63: 60,
            0.8: 55,
            1: 50,
            1.25: 43,
            1.6: 40,
            2: 36,
            2.5: 32,
            3.1: 28,
          },
          20: {
            0.12: 105,
            0.16: 95,
            0.2: 87,
            0.25: 80,
            0.31: 73,
            0.4: 65,
            0.5: 60,
            0.63: 55,
            0.8: 50,
            1: 43,
            1.25: 40,
            1.6: 36,
            2: 32,
            2.5: 28,
            3.1: 26,
          },
        },
      },
    },
    external_grooving: {
      matP: {
        tvsplav: {
          0.04: 238,
          0.06: 206,
          0.08: 163,
          0.1: 137,
          0.12: 120,
          0.16: 95,
          0.2: 79,
          0.25: 67,
          0.3: 58,
          0.4: 45,
          0.5: 0.38,
        },
        bistrorez: {
          0.04: 60,
          0.06: 54,
          0.08: 48,
          0.1: 40,
          0.12: 36,
          0.16: 33,
          0.2: 26.5,
          0.25: 22,
          0.3: 20,
          0.4: 17,
          0.5: 14,
        },
      },
      matK: {
        tvsplav: {
          0.04: 110,
          0.06: 99,
          0.08: 89,
          0.1: 79,
          0.12: 74,
          0.16: 66,
          0.2: 60,
          0.25: 56,
          0.3: 52,
          0.4: 46,
          0.5: 0.42,
        },
        bistrorez: {
          0.04: 45,
          0.06: 40,
          0.08: 36,
          0.1: 33,
          0.12: 28.5,
          0.16: 26.5,
          0.2: 24,
          0.25: 22,
          0.3: 20.5,
          0.4: 18.5,
          0.5: 17,
        },
      },
      matN: {
        tvsplav: {
          0.04: 110,
          0.06: 99,
          0.08: 89,
          0.1: 79,
          0.12: 74,
          0.16: 66,
          0.2: 60,
          0.25: 56,
          0.3: 52,
          0.4: 46,
          0.5: 0.42,
        },
        bistrorez: {
          0.04: 45,
          0.06: 40,
          0.08: 36,
          0.1: 33,
          0.12: 28.5,
          0.16: 26.5,
          0.2: 24,
          0.25: 22,
          0.3: 20.5,
          0.4: 18.5,
          0.5: 17,
        },
      },
    },
    drilling: {
      matP: {
        6: 23,
        8: 25,
        10: 25,
        12: 25,
        16: 26,
        20: 27,
        25: 27,
        30: 27,
        35: 25,
        40: 23,
        50: 23,
        60: 23,
      },
      matK: {
        6: 23,
        8: 25,
        10: 25,
        12: 25,
        16: 26,
        20: 27,
        25: 27,
        30: 27,
        35: 25,
        40: 23,
        50: 23,
        60: 23,
      },
      matN: {
        6: 35,
        8: 35,
        10: 35,
        12: 35,
        16: 36,
        20: 37,
        25: 37,
        30: 37,
        35: 36,
        40: 35,
        50: 35,
        60: 35,
      },
    },
    redrilling: {
      matP: { 25: 22, 30: 22, 40: 22, 50: 22, 60: 22, 70: 22, 75: 22 },
      matK: { 25: 22, 30: 22, 40: 22, 50: 22, 60: 22, 70: 22, 75: 22 },
      matN: { 25: 32, 30: 32, 40: 32, 50: 32, 60: 32, 70: 32, 75: 32 },
    },
    countersinking: {
      matP: { 20: 25, 25: 25, 31.5: 20, 40: 16, 50: 16, 63: 16, 80: 12.5 },
      matK: { 20: 25, 25: 25, 31.5: 25, 40: 25, 50: 20, 63: 20, 80: 20 },
      matN: { 20: 45, 25: 45, 31.5: 36, 40: 36, 50: 36, 63: 28, 80: 28 },
    },
    reaming: {
      matP: { 20: 5, 25: 5, 31.5: 5, 40: 4, 50: 4, 63: 4, 80: 4 },
      matK: { 20: 6, 25: 6, 31.5: 6, 40: 5, 50: 5, 63: 1.6, 80: 5 },
      matN: { 20: 10, 25: 10, 31.5: 10, 40: 8, 50: 8, 63: 8, 80: 8 },
    },
  },
  correctionFactors: {
    forFeeds: {
      hardnessFactor: {
        matP: {
          "117-142": 1.25,
          "145-171": 1.2,
          "174-200": 1.1,
          "202-228": 1,
          "231-257": 0.9,
          "260-286": 0.8,
          "288-314": 0.75,
          "317-343": 0.7,
          "345-372": 0.65,
          "374-400": 0.6,
        },
        matK: {
          "121-140": 1.1,
          "141-160": 1.1,
          "161-180": 1.1,
          "181-200": 1,
          "201-220": 0.9,
          "221-240": 0.9,
          "241-260": 0.8,
          "261-280": 0.8,
          "281-300": 0.8,
          "301-320": 0.8,
        },
        matN: { "40-100": 1.1, "100-140": 1, "140-200": 0.9 },
      },
      surfaceСondition: {
        prokat: {
          withoutcrust: { nohit: 1, hit: 0.85 },
          withcrust: { nohit: 1, hit: 0.85 },
        },
        pokovka: {
          withoutcrust: { nohit: 0.95, hit: 7 },
          withcrust: { nohit: 0.8, hit: 0.65 },
        },
        litie: {
          withoutcrust: { nohit: 0.9, hit: 0.65 },
          withcrust: { nohit: 0.7, hit: 0.55 },
        },
      },
      cutterMaterialGeometry: {
        matP: {
          r18: { 45: 1, 60: 1.2, 90: 0.9 },
          r6m5: { 45: 1, 60: 1.2, 90: 0.9 },
          t5k10: { 45: 1, 60: 1, 90: 0.7 },
          t15k6: { 45: 1, 60: 0.8, 90: 0.35 },
          tt7k12: { 45: 1, 60: 1.2, 90: 0.85 },
        },
        matK: {
          r18: { 45: 1, 60: 1.15, 90: 0.8 },
          r6m5: { 45: 1, 60: 1.1, 90: 0.75 },
          vk8: { 45: 1, 60: 1, 90: 0.7 },
          vk6: { 45: 1, 60: 0.95, 90: 0.65 },
          vk3: { 45: 1, 60: 0.8, 90: 0.6 },
          vk2: { 45: 0.9, 60: 0.75, 90: 0.55 },
        },
        matN: {
          r18: { 45: 1, 60: 1.15, 90: 0.8 },
          r6m5: { 45: 1, 60: 1.1, 90: 0.75 },
          vk8: { 45: 1, 60: 1, 90: 0.7 },
          vk6: { 45: 1, 60: 0.95, 90: 0.65 },
          vk3: { 45: 1, 60: 0.8, 90: 0.6 },
          vk2: { 45: 0.9, 60: 0.75, 90: 0.55 },
        },
      },
    },
    forCuttingSpeed: {
      hardnessFactor: {
        matP: {
          tvsplav: {
            C_nomore_60: {
              "117-142": 2.14,
              "145-171": 1.58,
              "174-200": 1.25,
              "202-228": 1,
              "231-257": 0.9,
            },
            C_more_60: {
              "174-200": 1.16,
              "202-228": 1,
              "231-257": 0.9,
              "260-286": 0.8,
              "288-314": 0.7,
              "317-343": 0.6,
              "345-372": 0.23,
              "374-400": 0.18,
            },
            C_nomore_60_with_Cr: {
              "117-142": 1.95,
              "145-171": 1.45,
              "174-200": 1.22,
              "202-228": 1,
              "231-257": 0.82,
              "260-286": 0.7,
              "288-314": 0.6,
            },
            C_more_60_with_Cr: {
              "145-171": 1.09,
              "174-200": 1,
              "202-228": 0.8,
              "231-257": 0.7,
              "260-286": 0.63,
              "288-314": 0.57,
              "317-343": 0.5,
              "345-372": 0.4,
              "374-400": 0.35,
            },
            C_nomore_60_with_Mn: {
              "174-200": 1.95,
              "202-228": 1.42,
              "231-257": 1.13,
              "260-286": 0.9,
              "288-314": 0.78,
              "317-343": 0.7,
              "345-372": 0.63,
              "374-400": 0.58,
            },
            C_nomore_60_with_Ni: {
              "117-142": 1.95,
              "145-171": 1.45,
              "174-200": 1.13,
              "202-228": 1,
            },
            C_nomore_60_with_Cr_Ni: {
              "117-142": 1.95,
              "145-171": 1.42,
              "174-200": 1.22,
              "202-228": 1,
              "231-257": 0.82,
              "260-286": 0.71,
              "288-314": 0.64,
              "317-343": 0.58,
              "345-372": 0.5,
              "374-400": 0.28,
            },
            C_nomore_60_with_Cr_Ni_Mo: {
              "117-142": 1.95,
              "145-171": 1.42,
              "174-200": 1.13,
              "202-228": 0.9,
              "231-257": 0.8,
              "260-286": 0.71,
              "288-314": 0.66,
              "317-343": 0.52,
              "374-400": 0.13,
            },
            C_nomore_60_with_Cr_Mn: {
              "145-171": 1.34,
              "174-200": 1.05,
              "202-228": 0.9,
              "231-257": 0.8,
              "260-286": 0.71,
              "288-314": 0.65,
              "317-343": 0.45,
              "345-372": 0.35,
              "374-400": 0.28,
            },
            C_nomore_60_with_Cr_Si: {
              "145-171": 1.22,
              "174-200": 1.03,
              "202-228": 0.9,
              "231-257": 0.8,
              "260-286": 0.71,
              "288-314": 0.64,
              "317-343": 0.59,
              "345-372": 0.41,
              "374-400": 0.35,
            },
            C_nomore_60_with_Cr_Ni_W: {
              "174-200": 1.13,
              "202-228": 1,
              "231-257": 0.9,
              "260-286": 0.8,
              "288-314": 0.59,
              "317-343": 0.53,
              "345-372": 0.5,
              "374-400": 0.47,
            },
            C_more_60_shx: {
              "202-228": 0.64,
              "231-257": 0.6,
              "260-286": 0.54,
              "288-314": 0.5,
              "317-343": 0.45,
            },
          },
          bistrorez: {
            C_nomore_60: {
              "117-142": 1.9,
              "145-171": 1.7,
              "174-200": 1.3,
              "202-228": 1,
              "231-257": 0.8,
            },
            C_more_60: {
              "174-200": 1.03,
              "202-228": 0.8,
              "231-257": 0.64,
              "260-286": 0.53,
              "288-314": 0.44,
            },
            C_nomore_60_with_Cr: {
              "117-142": 2,
              "145-171": 1.44,
              "174-200": 1.1,
              "202-228": 0.85,
              "231-257": 0.7,
              "260-286": 0.56,
              "288-314": 0.47,
            },
            C_more_60_with_Cr: {
              "145-171": 1.35,
              "174-200": 1,
              "202-228": 0.8,
              "231-257": 0.64,
              "260-286": 0.54,
              "288-314": 0.44,
            },
            C_nomore_60_with_Mn: {
              "174-200": 1.9,
              "202-228": 1.36,
              "231-257": 1.04,
              "260-286": 0.8,
              "288-314": 0.66,
            },
            C_nomore_60_with_Ni: {
              "117-142": 2.2,
              "145-171": 1.7,
              "174-200": 1.3,
              "202-228": 1,
            },
            C_nomore_60_with_Cr_Ni: {
              "117-142": 2.12,
              "145-171": 1.62,
              "174-200": 1.23,
              "202-228": 1,
              "231-257": 0.75,
              "260-286": 0.7,
              "288-314": 0.6,
            },
            C_nomore_60_with_Cr_Ni_Mo: {
              "117-142": 1.69,
              "145-171": 1.29,
              "174-200": 1,
              "202-228": 0.8,
              "231-257": 0.68,
              "260-286": 0.59,
              "288-314": 0.52,
            },
            C_nomore_60_with_Cr_Mn: {
              "145-171": 1.13,
              "174-200": 0.85,
              "202-228": 0.8,
              "231-257": 0.68,
              "260-286": 0.59,
              "288-314": 0.52,
            },
            C_nomore_60_with_Cr_Si: {
              "145-171": 1.15,
              "174-200": 0.86,
              "202-228": 0.7,
              "231-257": 0.56,
              "260-286": 0.5,
              "288-314": 0.41,
            },
            C_nomore_60_with_Cr_Ni_W: {
              "174-200": 0.95,
              "202-228": 0.8,
              "231-257": 0.64,
              "260-286": 0.59,
              "288-314": 0.43,
            },
            C_nomore_shx: {
              "202-228": 0.6,
              "231-257": 0.5,
              "260-286": 0.44,
              "288-314": 0.39,
              "317-343": 0.3,
            },
          },
        },
        matK: {
          tvsplav: {
            gray: {
              "121-140": 1.66,
              "141-160": 1.35,
              "161-180": 1.13,
              "181-200": 1,
              "201-220": 0.88,
              "221-240": 0.79,
              "241-260": 0.71,
              "261-280": 0.64,
            },
            malleable: {
              "100-120": 1.94,
              "121-140": 1.66,
              "141-160": 1.39,
              "161-180": 1,
              "181-200": 0.85,
              "201-220": 0.73,
              "221-240": 0.64,
              "241-260": 0.56,
              "261-280": 0.5,
            },
            antifriction: {
              "141-160": 1.1,
              "161-180": 0.92,
              "181-200": 0.78,
              "201-220": 0.67,
              "221-240": 0.6,
              "241-260": 0.53,
            },
            highstrength: {
              "141-160": 1.1,
              "161-180": 0.92,
              "181-200": 0.78,
              "201-220": 0.67,
              "221-240": 0.6,
              "241-260": 0.53,
            },
            chromic: {
              "141-160": 1.15,
              "161-180": 1,
              "181-200": 0.85,
              "201-220": 0.73,
              "221-240": 0.64,
              "241-260": 0.56,
              "261-280": 0.5,
              "281-300": 0.45,
              "301-320": 0.41,
            },
          },
          bistrorez: {
            gray: {
              "121-140": 1.67,
              "141-160": 1.51,
              "161-180": 1.21,
              "181-200": 1,
              "201-220": 0.88,
              "221-240": 0.79,
              "241-260": 0.71,
              "261-280": 0.64,
            },
            malleable: {
              "100-120": 1.75,
              "121-140": 1.28,
              "141-160": 1.1,
              "161-180": 1,
              "181-200": 0.85,
              "201-220": 0.73,
              "221-240": 0.64,
              "241-260": 0.56,
              "261-280": 0.5,
            },
            antifriction: {
              "141-160": 1.1,
              "161-180": 0.92,
              "181-200": 0.78,
              "201-220": 0.67,
              "221-240": 0.6,
              "241-260": 0.53,
            },
            highstrength: {
              "141-160": 1.1,
              "161-180": 0.92,
              "181-200": 0.78,
              "201-220": 0.67,
              "221-240": 0.6,
              "241-260": 0.53,
            },
            chromic: {
              "141-160": 1.15,
              "161-180": 1,
              "181-200": 0.85,
              "201-220": 0.73,
              "221-240": 0.64,
              "241-260": 0.56,
              "261-280": 0.5,
              "281-300": 0.45,
              "301-320": 0.41,
            },
          },
        },

        matN: {
          tvsplav: {
            aluminum: { "40-100": 5 },
            duralumin: { "40-100": 5, "100-140": 4 },
            bronze: { "40-100": 1, "100-140": 1.7 },
          },
          bistrorez: {
            aluminum: { "40-100": 5 },
            duralumin: { "40-100": 5, "100-140": 4 },
            bronze: { "40-100": 1, "100-140": 1.7 },
          },
        },
      },
      surfaceСondition: {
        prokat: {
          withoutcrust: { nohit: 1, hit: 0.85 },
          withcrust: { nohit: 1, hit: 0.85 },
        },
        pokovka: {
          withoutcrust: { nohit: 0.95, hit: 7 },
          withcrust: { nohit: 0.8, hit: 0.65 },
        },
        litie: {
          withoutcrust: { nohit: 0.9, hit: 0.65 },
          withcrust: { nohit: 0.7, hit: 0.55 },
        },
      },
      cutterMaterial: {
        matP: {
          tvsplav: {
            t5k10: 1,
            t15k6: 1.54,
            t30k4: 2.15,
            tt7k12: 0.67,
            vk8: 0.9,
          },
          bistrorez: {
            r6m5: 1,
            r18: 1.1,
          },
        },
        matK: {
          tvsplav: {
            vk8: 1,
            vk6: 1.2,
            vk3: 1.38,
            vk2: 1.14,
          },
        },
        matN: {
          tvsplav: {
            vk8: 1,
            vk6: 1.1,
            vk3: 1.2,
            vk2: 1.25,
          },
          bistrorez: {
            r6m5: 1,
            r18: 1.1,
          },
        },
      },
      cutterLife: {
        30: 1.08,
        45: 1,
        60: 0.94,
        90: 0.87,
        120: 0.82,
        180: 0.75,
      },
      cutterGeometry: {
        45: 1,
        60: 1,
        90: 0.9,
      },
      typeofProcessing: {
        longturning: 1,
        crossturning: { 0.4: 1.25, 0.7: 1.2, 1: 1.05 },
        boring: { 75: 0.75, 150: 0.8, 250: 0.9, 300: 1 },
      },
      typeofPart: {
        vtulka: { 30: 0.45, 15: 0.6, 5: 0.75, 1: 1 },
        val: { 10: 1, 12: 0.8, 15: 0.7, 20: 0.6, 30: 0.4, 40: 0.3 },
      },
      cooling: {
        sog: 1,
        nosog: 0.8,
      },
      diameters_ratio: {
        0: 1.43,
        0.2: 1.37,
        0.4: 1.29,
        0.6: 1.2,
        0.8: 1.1,
        1: 1,
      },
      drill_length: {
        3: 1,
        5: 0.9,
        7: 0.8,
        10: 0.75,
        15: 0.7,
        30: 0.6,
      },
    },
  },
  cuttingin_overrun: {
    longturning: {
      45: { 1: 2, 2: 3.5, 3: 5, 4: 6, 5: 7, 6: 8, 8: 11, 10: 13, 12: 17, 16: 18, 22: 25, 30: 33 },
      60: {
        1: 1.6,
        2: 2.7,
        3: 3.8,
        4: 4.3,
        5: 5,
        6: 5.5,
        8: 7.6,
        10: 8.7,
        12: 10,
        16: 12.3,
        22: 15.7,
        30: 20.5,
      },
      90: { 1: 3, 2: 3, 3: 4, 4: 4, 5: 4, 6: 4, 8: 5, 10: 5, 12: 5, 16: 5, 22: 5, 30: 5 },
    },
    boring: {
      45: { 1: 2, 2: 3.5, 3: 5, 4: 6, 5: 7, 6: 8, 8: 11, 10: 13, 12: 17, 16: 18, 22: 25, 30: 33 },
      60: {
        1: 1.6,
        2: 2.7,
        3: 3.8,
        4: 4.3,
        5: 5,
        6: 5.5,
        8: 7.6,
        10: 8.7,
        12: 10,
        16: 12.3,
        22: 15.7,
        30: 20.5,
      },
      90: { 1: 3, 2: 3, 3: 4, 4: 4, 5: 4, 6: 4, 8: 5, 10: 5, 12: 5, 16: 5, 22: 5, 30: 5 },
    },
  },
};

let tokarnovintorezn_defaultstate = {
  model: "16B16P",
  modelstate: "",
  maxLength: 750,
  maxDiameterPatron: 320,
  maxDiameterCentra: 180,
  maxWeightPatron: 80,
  maxWeightCentra: 260,
  partweight: "",
  partweightstate: "",
  partlength: "1000",
  typeworkpiece: "prokat",
  partmaterial: "matP",
  hardnessmassiv: [],
  parthardness: "117-142",
  part_gradematerial: "C_nomore_60",
  partform: "cilindric",
  typeofpart: "val",
  numberparts: "1",
  numberpartsstate: "",
  perehods: [],
  sd_factorstate: "",
  generallengthstate: "",

  get_Tokarnovintorezn_TimeInstall(indper) {
    if (this.partweight > this.maxWeight) {
      return "ошибки";
    } else if (
      (this.perehods[indper][0] == "Вспомагательный переход" &&
        Object.keys(this.perehods[indper][1]).length < 2) ||
      (this.perehods[indper][0] == "Вспомагательный переход" &&
        Object.values(this.perehods[indper][1]).includes(""))
    ) {
      return "";
    } else {
      if (this.partweight === "0" || this.numberparts === "0") return 0;
      else if (this.partweight === "" || this.numberparts === "") {
        return "ошибки";
      } else {
        const rangeWeight = [
          0.5, 3, 1, 5, 10, 20, 30, 50, 100, 200, 400, 800, 1500, 3000, 5000, 10000,
        ];
        let specifiedWeight = rangeWeight.find((item) => item >= this.partweight);
        const rangeLength = [1000, 2000, 3000, 5000];
        let specifiedLength = rangeLength.find((item) => item >= this.partweight);

        let installTime =
          dataTokarnovintorezn.installRemovalTime[this.partform][
            this.perehods[indper][1].installoption
          ][this.perehods[indper][1].positionaccuracy][specifiedLength][specifiedWeight];
        return installTime;
      }
    }
  },

  get_Tokarnovintorezn_MainTime(indper, indstr) {
    if (this.partweight > this.maxWeight) {
      return "ошибки";
    } else if (this.partweight === "" || this.numberparts === "") return "ошибки";
    else if (
      this.perehods[indper][1][indstr].length > this.maxLength ||
      this.perehods[indper][1][indstr].diameter > this.maxDiameter
    ) {
      return "ошибки";
    } else if (this.perehods[indper][0] == "Основной переход") {
      let MainTime = 0;
      let dataperehod = this.perehods[indper][1][indstr];
      switch (dataperehod.typetreatment) {
        //
        // ----------черновое наружное точение------------------

        case "longturning":
          if (
            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("crust") &&
            Object.keys(dataperehod).includes("impact_treatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter") &&
            Object.keys(dataperehod).includes("length") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("accuracy") &&
            dataperehod.crust &&
            dataperehod.impact_treatment &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter &&
            dataperehod.length &&
            dataperehod.accuracy &&
            dataperehod.allowance &&
            dataperehod.vertex_radius &&
            dataperehod.diameter <= dataperehod.maxDiameter &&
            dataperehod.length <= this.maxLength &&
            dataperehod.charactertreatment === "rough"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter = Number(dataperehod.diameter);
            let length = Number(dataperehod.length);
            let accuracy = dataperehod.accuracy;

            let specified_center_height = [250, 315, 400, 500, 900].find(
              (item) =>
                item >= dataTokarnovintorezn.machineModels[this.model].characteristics.center_height
            );

            let get_specified_diameter = () => {
              let specified_diameter = 0;
              switch (specified_center_height) {
                case 250:
                  specified_diameter = [20, 40, 60, 100, 350, 500].find((item) => item >= diameter);
                  break;
                case 315:
                  specified_diameter = [100, 350, 630].find((item) => item >= diameter);
                  break;
                case 400:
                  specified_diameter = [100, 350, 800].find((item) => item >= diameter);
                  break;
                case 500:
                  specified_diameter = [350, 500, 1000].find((item) => item >= diameter);
                  break;
              }
              return specified_diameter;
            };

            let get_cutdepth = () => {
              let depthkeys = Object.keys(
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][specified_center_height][get_specified_diameter()]
              ).sort((a, b) => a - b);
              let maxdepth = depthkeys.reduce((acc, item) => (+item > +acc ? item : acc));
              let mindepth = depthkeys.reduce((acc, item) => (+item < +acc ? item : acc));
              if (Number(allowance) >= Number(maxdepth)) return maxdepth;
              else if (Number(allowance) <= Number(mindepth)) return mindepth;
              else return depthkeys.find((item, i, arr) => Number(item) >= Number(allowance));
            };

            console.log("get_cutdepth()", get_cutdepth());

            let numprohod = Math.ceil(allowance / get_cutdepth());

            console.log("numprohod", numprohod);

            let koefficient_feed =
              dataTokarnovintorezn.correctionFactors.forFeeds.hardnessFactor[this.partmaterial][
                this.parthardness
              ] *
              dataTokarnovintorezn.correctionFactors.forFeeds.surfaceСondition[this.typeworkpiece][
                dataperehod.crust
              ][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forFeeds.cutterMaterialGeometry[
                this.partmaterial
              ][dataperehod.cuttingmaterial][dataperehod.mainplanangle];

            let feed =
              dataTokarnovintorezn.feeds[dataperehod.typetreatment][dataperehod.charactertreatment][
                this.partmaterial
              ][specified_center_height][get_specified_diameter()][get_cutdepth()] *
              koefficient_feed;

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => Number(item) >= Number(get_cutdepth()));

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("koefficient_feed", koefficient_feed);
            console.log("подачa черн расчетная", feed);
            console.log("подачa черн уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.surfaceСondition[
                this.typeworkpiece
              ][dataperehod.crust][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.longturning *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            console.log("koefficient_cuttingspeed", koefficient_cuttingspeed);

            let cuttingspeed = 0;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_gestkcentr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    diameter) /
                  1000;
                cuttingspeed =
                  +cuttingspeed_gestkcentr <= +cuttingspeed_patron
                    ? cuttingspeed_gestkcentr
                    : cuttingspeed_patron;
              } else if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_lunet <= +cuttingspeed_patron
                    ? cuttingspeed_lunet
                    : cuttingspeed_patron;
              } else if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingspeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    diameter) /
                  1000;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_centr <= +cuttingspeed_lunet
                    ? cuttingspeed_centr
                    : cuttingspeed_lunet;
              }
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * diameter);

            console.log("скорость рез черновая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime_first_last =
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                lobr
              ][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                    lobr
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= diameter)
              ];

            let trasitiontime_other =
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                lobr
              ][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr]["0"][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= diameter)
              ];

            let trasitiontime_full = 0;
            if (numprohod <= 2) {
              trasitiontime_full = numprohod * trasitiontime_first_last;
            } else {
              trasitiontime_full =
                trasitiontime_first_last * 2 + (numprohod - 2) * trasitiontime_other * 0.6;
            }

            console.log("вспомагательное черновое", trasitiontime_full);

            let cuttingin_overrun =
              dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                dataperehod.mainplanangle
              ][
                Object.keys(
                  dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                    dataperehod.mainplanangle
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= get_cutdepth())
              ];

            MainTime =
              Number(
                Number(
                  (((length + cuttingin_overrun) * numprohod) / (rpm * specified_feed)).toFixed(1)
                )
              ) + Number(trasitiontime_full.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: get_cutdepth(),
              trasitiontime: trasitiontime_full.toFixed(1),
              machintime: (
                ((length + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          } else if (
            //
            // ---------------чистовое наружное точение--------------

            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter") &&
            Object.keys(dataperehod).includes("length") &&
            Object.keys(dataperehod).includes("roghness") &&
            Object.keys(dataperehod).includes("accuracy") &&
            Object.keys(dataperehod).includes("allowance") &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter &&
            dataperehod.length &&
            dataperehod.roghness &&
            dataperehod.accuracy &&
            dataperehod.allowance &&
            dataperehod.vertex_radius &&
            dataperehod.diameter <= dataperehod.maxDiameter &&
            dataperehod.length <= this.maxLength &&
            !dataperehod.stateallowence &&
            dataperehod.charactertreatment === "finish"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter = Number(dataperehod.diameter);
            let length = Number(dataperehod.length);
            let accuracy = dataperehod.accuracy;
            let roghness = dataperehod.roghness;
            let vertexradius = dataperehod.vertex_radius;
            let numprohod =
              dataTokarnovintorezn.feeds.numberPasses[roghness][dataperehod.typetreatment][
                accuracy
              ];
            let cutdepth = allowance / numprohod;
            let specified_parthardness = 0;
            let masparthardnes = this.parthardness.split("-");

            if (Number(masparthardnes[1]) <= 170) specified_parthardness = 170;
            else if (Number(masparthardnes[1]) > 170 && Number(masparthardnes[1]) <= 210)
              specified_parthardness = 210;
            else specified_parthardness = 280;

            let feed = 0;
            let cuttingSpeed = 120;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              if (this.partmaterial === "matP") {
                feed =
                  dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                    dataperehod.charactertreatment
                  ][this.partmaterial][specified_parthardness][vertexradius][cuttingSpeed][
                    roghness
                  ];
              } else {
                feed =
                  dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                    dataperehod.charactertreatment
                  ][this.partmaterial][specified_parthardness][vertexradius][roghness];
              }
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                cuttingSpeed =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    diameter) /
                  1000;
              }
              if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                cuttingSpeed =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
              }
              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingSpeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    diameter) /
                  1000;
                let cuttingSpeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];

                cuttingSpeed =
                  cuttingSpeed_centr < cuttingSpeed_lunet ? cuttingSpeed_centr : cuttingSpeed_lunet;
              }
            }

            let specified_cuttingSpeed = [50, 80, 120].find((item) => item >= cuttingSpeed);

            if (this.partmaterial === "matP") {
              feed =
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][specified_parthardness][vertexradius][specified_cuttingSpeed][
                  roghness
                ];
            } else {
              feed =
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][specified_parthardness][vertexradius][roghness];
            }

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => +item >= +cutdepth);

            console.log(specified_cutdepth);

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("подачa чист расчетная", feed);
            console.log("подачa чист уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.longturning *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            let cuttingspeed = 0;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_gestkcentr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    diameter) /
                  1000;
                cuttingspeed =
                  +cuttingspeed_gestkcentr <= +cuttingspeed_patron
                    ? cuttingspeed_gestkcentr
                    : cuttingspeed_patron;
              } else if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_lunet <= +cuttingspeed_patron
                    ? cuttingspeed_lunet
                    : cuttingspeed_patron;
              } else if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingspeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    diameter) /
                  1000;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_centr <= +cuttingspeed_lunet
                    ? cuttingspeed_centr
                    : cuttingspeed_lunet;
              }
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * diameter);

            console.log("коеф на чист скорость", koefficient_cuttingspeed);

            console.log("скорость рез чистовая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime =
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                lobr
              ][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                    lobr
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= diameter)
              ];

            console.log("чистовое вспомагательное", trasitiontime);

            let cuttingin_overrun =
              dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                dataperehod.mainplanangle
              ][
                Object.keys(
                  dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                    dataperehod.mainplanangle
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= cutdepth)
              ];

            MainTime =
              Number(
                (((length + cuttingin_overrun) * numprohod) / (rpm * specified_feed)).toFixed(1)
              ) + Number(trasitiontime.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: cutdepth,
              trasitiontime: trasitiontime.toFixed(1),
              machintime: (
                ((length + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          }
          break;
        //
        // -------------черновое растачивание------------------

        case "boring":
          if (
            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("crust") &&
            Object.keys(dataperehod).includes("impact_treatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter") &&
            Object.keys(dataperehod).includes("length") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("accuracy") &&
            dataperehod.crust &&
            dataperehod.impact_treatment &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter &&
            dataperehod.length &&
            dataperehod.accuracy &&
            dataperehod.allowance &&
            dataperehod.mandrel_section &&
            dataperehod.diameter <= dataperehod.maxDiameter &&
            dataperehod.length <= this.maxLength &&
            !dataperehod.stateoverhang &&
            dataperehod.charactertreatment === "rough"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter = Number(dataperehod.diameter);
            let length = Number(dataperehod.length);
            let accuracy = dataperehod.accuracy;

            let get_overhang = () => {
              return Object.keys(
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][dataperehod.mandrel_section]
              )
                .sort((a, b) => a - b)
                .find((item) => Number(item) >= Number(length));
            };

            console.log("get_overhang", get_overhang());

            let get_cutdepth = () => {
              let depthkeys = Object.keys(
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][dataperehod.mandrel_section][get_overhang()]
              ).sort((a, b) => a - b);
              let maxdepth = depthkeys.reduce((acc, item) => (+item > +acc ? item : acc));
              let mindepth = depthkeys.reduce((acc, item) => (+item < +acc ? item : acc));
              if (Number(allowance) >= Number(maxdepth)) return maxdepth;
              else if (Number(allowance) <= Number(mindepth)) return mindepth;
              else return depthkeys.find((item, i, arr) => Number(item) >= Number(allowance));
            };

            console.log("get_cutdepth()", get_cutdepth());

            let numprohod = Math.ceil(allowance / get_cutdepth());

            console.log("numprohod", numprohod);

            let koefficient_feed =
              dataTokarnovintorezn.correctionFactors.forFeeds.hardnessFactor[this.partmaterial][
                this.parthardness
              ] *
              dataTokarnovintorezn.correctionFactors.forFeeds.surfaceСondition[this.typeworkpiece][
                dataperehod.crust
              ][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forFeeds.cutterMaterialGeometry[
                this.partmaterial
              ][dataperehod.cuttingmaterial][dataperehod.mainplanangle];

            let feed =
              dataTokarnovintorezn.feeds[dataperehod.typetreatment][dataperehod.charactertreatment][
                this.partmaterial
              ][dataperehod.mandrel_section][get_overhang()][get_cutdepth()] * koefficient_feed;

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => Number(item) >= Number(get_cutdepth()));

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("koefficient_feed", koefficient_feed);
            console.log("подачa расточка черн расчетная", feed);
            console.log("подачa расточка черн уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            function typeofProcessing() {
              if (diameter >= 300) return 1;
              else {
                let boringkey = Object.keys(
                  dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.boring
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= diameter);
                return dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing
                  .boring[boringkey];
              }
            }

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.surfaceСondition[
                this.typeworkpiece
              ][dataperehod.crust][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              typeofProcessing() *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            console.log("koefficient_cuttingspeed", koefficient_cuttingspeed);

            let cuttingspeed = 0;

            if (dataperehod.typelunet === "none") {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * diameter);

            console.log("скорость рез черновая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime_first_last =
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                lobr
              ][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                    lobr
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= diameter)
              ];

            let trasitiontime_other =
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                lobr
              ][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr]["0"][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= diameter)
              ];

            let trasitiontime_full = 0;
            if (numprohod <= 2) {
              trasitiontime_full = numprohod * trasitiontime_first_last;
            } else {
              trasitiontime_full =
                trasitiontime_first_last * 2 + (numprohod - 2) * trasitiontime_other * 0.6;
            }

            console.log("вспомагательное черновое", trasitiontime_full);

            let cuttingin_overrun =
              dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                dataperehod.mainplanangle
              ][
                Object.keys(
                  dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                    dataperehod.mainplanangle
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= get_cutdepth())
              ];

            MainTime =
              Number(
                (((length + cuttingin_overrun) * numprohod) / (rpm * specified_feed)).toFixed(1)
              ) + Number(trasitiontime_full.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: get_cutdepth(),
              trasitiontime: trasitiontime_full.toFixed(1),
              machintime: (
                ((length + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          } else if (
            //
            // ---------------чистовое растачивание--------------

            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter") &&
            Object.keys(dataperehod).includes("length") &&
            Object.keys(dataperehod).includes("roghness") &&
            Object.keys(dataperehod).includes("accuracy") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("mandrel_section") &&
            Object.keys(dataperehod).includes("vertex_radius") &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter &&
            dataperehod.length &&
            dataperehod.roghness &&
            dataperehod.accuracy &&
            dataperehod.allowance &&
            dataperehod.mandrel_section &&
            dataperehod.vertex_radius &&
            dataperehod.diameter <= dataperehod.maxDiameter &&
            dataperehod.length <= this.maxLength &&
            !dataperehod.stateallowence &&
            dataperehod.charactertreatment === "finish"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter = Number(dataperehod.diameter);
            let length = Number(dataperehod.length);
            let accuracy = dataperehod.accuracy;
            let roghness = dataperehod.roghness;
            let vertexradius = dataperehod.vertex_radius;
            let numprohod =
              dataTokarnovintorezn.feeds.numberPasses[roghness][dataperehod.typetreatment][
                accuracy
              ];
            let cutdepth = allowance / numprohod;
            let specified_parthardness = 0;
            let masparthardnes = this.parthardness.split("-");

            if (Number(masparthardnes[1]) <= 170) specified_parthardness = 170;
            else if (Number(masparthardnes[1]) > 170 && Number(masparthardnes[1]) <= 210)
              specified_parthardness = 210;
            else specified_parthardness = 280;

            let feed = 0;
            let cuttingSpeed = 120;

            if (dataperehod.typelunet === "none") {
              if (this.partmaterial === "matP") {
                feed =
                  dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                    dataperehod.charactertreatment
                  ][this.partmaterial][specified_parthardness][vertexradius][cuttingSpeed][
                    roghness
                  ];
              } else {
                feed =
                  dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                    dataperehod.charactertreatment
                  ][this.partmaterial][specified_parthardness][vertexradius][roghness];
              }
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              cuttingSpeed =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
            }

            let specified_cuttingSpeed = [50, 80, 120].find((item) => item >= cuttingSpeed);

            if (this.partmaterial === "matP") {
              feed =
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][specified_parthardness][vertexradius][specified_cuttingSpeed][
                  roghness
                ];
            } else {
              feed =
                dataTokarnovintorezn.feeds[dataperehod.typetreatment][
                  dataperehod.charactertreatment
                ][this.partmaterial][specified_parthardness][vertexradius][roghness];
            }

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => +item >= +cutdepth);

            console.log(specified_cutdepth);

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("подачa чист расчетная", feed);
            console.log("подачa чист уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            function typeofProcessing() {
              if (diameter >= 300) return 1;
              else {
                let boringkey = Object.keys(
                  dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.boring
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= diameter);
                return dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing
                  .boring[boringkey];
              }
            }

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              typeofProcessing() *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            let cuttingspeed = 0;

            if (dataperehod.typelunet === "none") {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * diameter);

            console.log("коеф на чист скорость", koefficient_cuttingspeed);

            console.log("скорость рез чистовая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime =
              dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                lobr
              ][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime[dataperehod.typetreatment][maxDobr][accuracy][
                    lobr
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= diameter)
              ];

            console.log("чистовое вспомагательное", trasitiontime);

            let cuttingin_overrun =
              dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                dataperehod.mainplanangle
              ][
                Object.keys(
                  dataTokarnovintorezn.cuttingin_overrun[dataperehod.typetreatment][
                    dataperehod.mainplanangle
                  ]
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= cutdepth)
              ];

            MainTime =
              Number(
                (((length + cuttingin_overrun) * numprohod) / (rpm * specified_feed)).toFixed(1)
              ) + Number(trasitiontime.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: cutdepth,
              trasitiontime: trasitiontime.toFixed(1),
              machintime: (
                ((length + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          }
          break;
        //
        // ----------черновая наружная подрезка------------------

        case "external_pruning":
          if (
            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("crust") &&
            Object.keys(dataperehod).includes("impact_treatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter1") &&
            Object.keys(dataperehod).includes("diameter2") &&
            Object.keys(dataperehod).includes("controllength") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("accuracy") &&
            dataperehod.crust &&
            dataperehod.impact_treatment &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter1 &&
            dataperehod.diameter2 &&
            dataperehod.controllength &&
            dataperehod.allowance &&
            dataperehod.accuracy &&
            dataperehod.diameter1 <= dataperehod.maxDiameter &&
            dataperehod.diameter2 <= dataperehod.maxDiameter &&
            dataperehod.controllength <= this.maxLength &&
            dataperehod.charactertreatment === "rough"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter1 = Number(dataperehod.diameter1);
            let diameter2 = Number(dataperehod.diameter2);
            let averagediameter = (diameter1 + diameter2) / 2;
            let length = Math.abs(diameter1 - diameter2) / 2;
            let controllength = Number(dataperehod.controllength);
            let accuracy = dataperehod.accuracy;

            let specified_center_height = [250, 315, 400, 500, 900].find(
              (item) =>
                item >= dataTokarnovintorezn.machineModels[this.model].characteristics.center_height
            );

            let get_specified_diameter = () => {
              let specified_diameter = 0;
              switch (specified_center_height) {
                case 250:
                  specified_diameter = [20, 40, 60, 100, 350, 500].find(
                    (item) => item >= averagediameter
                  );
                  break;
                case 315:
                  specified_diameter = [100, 350, 630].find((item) => item >= averagediameter);
                  break;
                case 400:
                  specified_diameter = [100, 350, 800].find((item) => item >= averagediameter);
                  break;
                case 500:
                  specified_diameter = [350, 500, 1000].find((item) => item >= averagediameter);
                  break;
              }
              return specified_diameter;
            };

            let get_cutdepth = () => {
              let depthkeys = Object.keys(
                dataTokarnovintorezn.feeds.longturning[dataperehod.charactertreatment][
                  this.partmaterial
                ][specified_center_height][get_specified_diameter()]
              ).sort((a, b) => a - b);
              let maxdepth = depthkeys.reduce((acc, item) => (+item > +acc ? item : acc));
              let mindepth = depthkeys.reduce((acc, item) => (+item < +acc ? item : acc));
              if (Number(allowance) >= Number(maxdepth)) return maxdepth;
              else if (Number(allowance) <= Number(mindepth)) return mindepth;
              else return depthkeys.find((item, i, arr) => Number(item) >= Number(allowance));
            };

            console.log("get_cutdepth()", get_cutdepth());

            let numprohod = Math.ceil(allowance / get_cutdepth());

            console.log("numprohod", numprohod);

            let koefficient_feed =
              dataTokarnovintorezn.correctionFactors.forFeeds.hardnessFactor[this.partmaterial][
                this.parthardness
              ] *
              dataTokarnovintorezn.correctionFactors.forFeeds.surfaceСondition[this.typeworkpiece][
                dataperehod.crust
              ][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forFeeds.cutterMaterialGeometry[
                this.partmaterial
              ][dataperehod.cuttingmaterial][dataperehod.mainplanangle];

            let feed =
              dataTokarnovintorezn.feeds["longturning"][dataperehod.charactertreatment][
                this.partmaterial
              ][specified_center_height][get_specified_diameter()][get_cutdepth()] *
              koefficient_feed;

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => Number(item) >= Number(get_cutdepth()));

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("koefficient_feed", koefficient_feed);
            console.log("подачa черн расчетная", feed);
            console.log("подачa черн уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.surfaceСondition[
                this.typeworkpiece
              ][dataperehod.crust][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.crossturning[
                Object.keys(
                  dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing
                    .crossturning
                )
                  .sort((a, b) => a - b)
                  .find((item) =>
                    item >= diameter1 > diameter2 ? diameter2 / diameter1 : diameter1 / diameter2
                  )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            console.log("koefficient_cuttingspeed", koefficient_cuttingspeed);

            let cuttingspeed = 0;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_gestkcentr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                cuttingspeed =
                  +cuttingspeed_gestkcentr <= +cuttingspeed_patron
                    ? cuttingspeed_gestkcentr
                    : cuttingspeed_patron;
              } else if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_lunet <= +cuttingspeed_patron
                    ? cuttingspeed_lunet
                    : cuttingspeed_patron;
              } else if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingspeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_centr <= +cuttingspeed_lunet
                    ? cuttingspeed_centr
                    : cuttingspeed_lunet;
              }
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * averagediameter);

            console.log("скорость рез черновая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );
            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime_first_last =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_other =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(dataTokarnovintorezn.trasitionTime.crossturning[maxDobr]["0"][lobr])
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_full = 0;
            if (numprohod <= 2) {
              trasitiontime_full = numprohod * trasitiontime_first_last;
            } else {
              trasitiontime_full =
                trasitiontime_first_last * 2 + (numprohod - 2) * trasitiontime_other * 0.6;
            }

            console.log("вспомагательное черновое", trasitiontime_full);

            let cuttingin_overrun = 5;

            MainTime =
              Number(
                (
                  ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                  (rpm * specified_feed)
                ).toFixed(1)
              ) + Number(trasitiontime_full.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: get_cutdepth(),
              trasitiontime: trasitiontime_full.toFixed(1),
              machintime: (
                ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          } else if (
            //
            // ---------------чистовая наружная подрезка--------------

            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter1") &&
            Object.keys(dataperehod).includes("diameter2") &&
            Object.keys(dataperehod).includes("controllength") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("accuracy") &&
            Object.keys(dataperehod).includes("roghness") &&
            Object.keys(dataperehod).includes("vertex_radius") &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter1 &&
            dataperehod.diameter2 &&
            dataperehod.controllength &&
            dataperehod.allowance &&
            dataperehod.accuracy &&
            dataperehod.roghness &&
            dataperehod.vertex_radius &&
            dataperehod.diameter1 <= dataperehod.maxDiameter &&
            dataperehod.diameter2 <= dataperehod.maxDiameter &&
            dataperehod.controllength <= this.maxLength &&
            !dataperehod.stateallowence &&
            dataperehod.charactertreatment === "finish"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter1 = Number(dataperehod.diameter1);
            let diameter2 = Number(dataperehod.diameter2);
            let averagediameter = (diameter1 + diameter2) / 2;
            let length = Math.abs(diameter1 - diameter2) / 2;
            let controllength = Number(dataperehod.controllength);
            let accuracy = dataperehod.accuracy;
            let roghness = dataperehod.roghness;
            let vertexradius = dataperehod.vertex_radius;
            let numprohod =
              dataTokarnovintorezn.feeds.numberPasses[roghness]["longturning"][accuracy];
            let cutdepth = allowance / numprohod;
            let specified_parthardness = 0;
            let masparthardnes = this.parthardness.split("-");

            if (Number(masparthardnes[1]) <= 170) specified_parthardness = 170;
            else if (Number(masparthardnes[1]) > 170 && Number(masparthardnes[1]) <= 210)
              specified_parthardness = 210;
            else specified_parthardness = 280;

            let feed = 0;
            let cuttingSpeed = 120;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              if (this.partmaterial === "matP") {
                feed =
                  dataTokarnovintorezn.feeds["longturning"][dataperehod.charactertreatment][
                    this.partmaterial
                  ][specified_parthardness][vertexradius][cuttingSpeed][roghness];
              } else {
                feed =
                  dataTokarnovintorezn.feeds["longturning"][dataperehod.charactertreatment][
                    this.partmaterial
                  ][specified_parthardness][vertexradius][roghness];
              }
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                cuttingSpeed =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
              }
              if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                cuttingSpeed =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
              }
              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingSpeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                let cuttingSpeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];

                cuttingSpeed =
                  cuttingSpeed_centr < cuttingSpeed_lunet ? cuttingSpeed_centr : cuttingSpeed_lunet;
              }
            }

            let specified_cuttingSpeed = [50, 80, 120].find((item) => item >= cuttingSpeed);

            if (this.partmaterial === "matP") {
              feed =
                dataTokarnovintorezn.feeds["longturning"][dataperehod.charactertreatment][
                  this.partmaterial
                ][specified_parthardness][vertexradius][specified_cuttingSpeed][roghness];
            } else {
              feed =
                dataTokarnovintorezn.feeds["longturning"][dataperehod.charactertreatment][
                  this.partmaterial
                ][specified_parthardness][vertexradius][roghness];
            }

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => +item >= +cutdepth);

            console.log(specified_cutdepth);

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("подачa чист расчетная", feed);
            console.log("подачa чист уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.crossturning[
                Object.keys(
                  dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing
                    .crossturning
                )
                  .sort((a, b) => a - b)
                  .find((item) =>
                    item >= diameter1 > diameter2 ? diameter2 / diameter1 : diameter1 / diameter2
                  )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            let cuttingspeed = 0;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_gestkcentr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                cuttingspeed =
                  +cuttingspeed_gestkcentr <= +cuttingspeed_patron
                    ? cuttingspeed_gestkcentr
                    : cuttingspeed_patron;
              } else if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                  koefficient_cuttingspeed;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_lunet <= +cuttingspeed_patron
                    ? cuttingspeed_lunet
                    : cuttingspeed_patron;
              } else if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingspeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_centr <= +cuttingspeed_lunet
                    ? cuttingspeed_centr
                    : cuttingspeed_lunet;
              }
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * averagediameter);

            console.log("коеф на чист скорость", koefficient_cuttingspeed);

            console.log("скорость рез чистовая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            console.log("чистовое вспомагательное", trasitiontime);

            let cuttingin_overrun = 5;

            MainTime =
              Number(
                (
                  ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                  (rpm * specified_feed)
                ).toFixed(1)
              ) + Number(trasitiontime.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: cutdepth,
              trasitiontime: trasitiontime.toFixed(1),
              machintime: (
                ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          }
          break;
        //
        // ----------черновая внутренняя подрезка------------------

        case "internal_pruning":
          if (
            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("crust") &&
            Object.keys(dataperehod).includes("impact_treatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter1") &&
            Object.keys(dataperehod).includes("diameter2") &&
            Object.keys(dataperehod).includes("controllength") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("accuracy") &&
            dataperehod.crust &&
            dataperehod.impact_treatment &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter1 &&
            dataperehod.diameter2 &&
            dataperehod.controllength &&
            dataperehod.accuracy &&
            dataperehod.allowance &&
            dataperehod.diameter1 <= dataperehod.maxDiameter &&
            dataperehod.diameter2 <= dataperehod.maxDiameter &&
            dataperehod.controllength <= this.maxLength &&
            dataperehod.charactertreatment === "rough"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter1 = Number(dataperehod.diameter1);
            let diameter2 = Number(dataperehod.diameter2);
            let averagediameter = (diameter1 + diameter2) / 2;
            let length = Math.abs(diameter1 - diameter2) / 2;
            let controllength = Number(dataperehod.controllength);
            let accuracy = dataperehod.accuracy;

            let get_overhang = () => {
              return Object.keys(
                dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][
                  this.partmaterial
                ][dataperehod.mandrel_section]
              )
                .sort((a, b) => a - b)
                .find((item) => Number(item) >= Number(controllength));
            };

            console.log("get_overhang", get_overhang());

            let get_cutdepth = () => {
              let depthkeys = Object.keys(
                dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][
                  this.partmaterial
                ][dataperehod.mandrel_section][get_overhang()]
              ).sort((a, b) => a - b);
              let maxdepth = depthkeys.reduce((acc, item) => (+item > +acc ? item : acc));
              let mindepth = depthkeys.reduce((acc, item) => (+item < +acc ? item : acc));
              if (Number(allowance) >= Number(maxdepth)) return maxdepth;
              else if (Number(allowance) <= Number(mindepth)) return mindepth;
              else return depthkeys.find((item, i, arr) => Number(item) >= Number(allowance));
            };

            console.log("get_cutdepth()", get_cutdepth());

            let numprohod = Math.ceil(allowance / get_cutdepth());

            console.log("numprohod", numprohod);

            let koefficient_feed =
              dataTokarnovintorezn.correctionFactors.forFeeds.hardnessFactor[this.partmaterial][
                this.parthardness
              ] *
              dataTokarnovintorezn.correctionFactors.forFeeds.surfaceСondition[this.typeworkpiece][
                dataperehod.crust
              ][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forFeeds.cutterMaterialGeometry[
                this.partmaterial
              ][dataperehod.cuttingmaterial][dataperehod.mainplanangle];

            let feed =
              dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][this.partmaterial][
                dataperehod.mandrel_section
              ][get_overhang()][get_cutdepth()] * koefficient_feed;

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => Number(item) >= Number(get_cutdepth()));

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("koefficient_feed", koefficient_feed);
            console.log("подачa расточка черн расчетная", feed);
            console.log("подачa расточка черн уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            function typeofProcessing() {
              if (averagediameter >= 300) return 1;
              else {
                let boringkey = Object.keys(
                  dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.boring
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= averagediameter);
                return dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing
                  .boring[boringkey];
              }
            }

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.surfaceСondition[
                this.typeworkpiece
              ][dataperehod.crust][dataperehod.impact_treatment] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              typeofProcessing() *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            console.log("koefficient_cuttingspeed", koefficient_cuttingspeed);

            let cuttingspeed = 0;

            if (dataperehod.typelunet === "none") {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * averagediameter);

            console.log("скорость рез черновая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime_first_last =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_other =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(dataTokarnovintorezn.trasitionTime.crossturning[maxDobr]["0"][lobr])
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_full = 0;
            if (numprohod <= 2) {
              trasitiontime_full = numprohod * trasitiontime_first_last;
            } else {
              trasitiontime_full =
                trasitiontime_first_last * 2 + (numprohod - 2) * trasitiontime_other * 0.6;
            }

            console.log("вспомагательное черновое", trasitiontime_full);

            let cuttingin_overrun = 5;

            MainTime =
              Number(
                (
                  ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                  (rpm * specified_feed)
                ).toFixed(1)
              ) + Number(trasitiontime_full.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: get_cutdepth(),
              trasitiontime: trasitiontime_full.toFixed(1),
              machintime: (
                ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          } else if (
            //
            // ---------------чистовая внутренняя подрезка--------------

            Object.keys(dataperehod).includes("charactertreatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("cuttingmaterial") &&
            Object.keys(dataperehod).includes("mainplanangle") &&
            Object.keys(dataperehod).includes("diameter1") &&
            Object.keys(dataperehod).includes("diameter2") &&
            Object.keys(dataperehod).includes("controllength") &&
            Object.keys(dataperehod).includes("allowance") &&
            Object.keys(dataperehod).includes("accuracy") &&
            Object.keys(dataperehod).includes("roghness") &&
            Object.keys(dataperehod).includes("mandrel_section") &&
            Object.keys(dataperehod).includes("vertex_radius") &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.cuttingmaterial &&
            dataperehod.mainplanangle &&
            dataperehod.diameter1 &&
            dataperehod.diameter2 &&
            dataperehod.controllength &&
            dataperehod.accuracy &&
            dataperehod.roghness &&
            dataperehod.allowance &&
            dataperehod.mandrel_section &&
            dataperehod.vertex_radius &&
            dataperehod.diameter1 <= dataperehod.maxDiameter &&
            dataperehod.diameter2 <= dataperehod.maxDiameter &&
            dataperehod.controllength <= this.maxLength &&
            !dataperehod.stateallowence &&
            dataperehod.charactertreatment === "finish"
          ) {
            let allowance = Number(dataperehod.allowance);
            let diameter1 = Number(dataperehod.diameter1);
            let diameter2 = Number(dataperehod.diameter2);
            let averagediameter = (diameter1 + diameter2) / 2;
            let length = Math.abs(diameter1 - diameter2) / 2;
            let controllength = Number(dataperehod.controllength);
            let accuracy = dataperehod.accuracy;
            let roghness = dataperehod.roghness;
            let vertexradius = dataperehod.vertex_radius;
            let numprohod =
              dataTokarnovintorezn.feeds.numberPasses[roghness]["longturning"][accuracy];
            let cutdepth = allowance / numprohod;
            let specified_parthardness = 0;
            let masparthardnes = this.parthardness.split("-");

            if (Number(masparthardnes[1]) <= 170) specified_parthardness = 170;
            else if (Number(masparthardnes[1]) > 170 && Number(masparthardnes[1]) <= 210)
              specified_parthardness = 210;
            else specified_parthardness = 280;

            let feed = 0;
            let cuttingSpeed = 120;

            if (dataperehod.typelunet === "none") {
              if (this.partmaterial === "matP") {
                feed =
                  dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][
                    this.partmaterial
                  ][specified_parthardness][vertexradius][cuttingSpeed][roghness];
              } else {
                feed =
                  dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][
                    this.partmaterial
                  ][specified_parthardness][vertexradius][roghness];
              }
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              cuttingSpeed =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
            }

            let specified_cuttingSpeed = [50, 80, 120].find((item) => item >= cuttingSpeed);

            if (this.partmaterial === "matP") {
              feed =
                dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][
                  this.partmaterial
                ][specified_parthardness][vertexradius][specified_cuttingSpeed][roghness];
            } else {
              feed =
                dataTokarnovintorezn.feeds.boring[dataperehod.charactertreatment][
                  this.partmaterial
                ][specified_parthardness][vertexradius][roghness];
            }

            let specified_cutdepth = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => +item >= +cutdepth);

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed[this.partmaterial][dataperehod.typecuttingmaterial][
                dataperehod.mainplanangle
              ][specified_cutdepth]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("подачa чист расчетная", feed);
            console.log("подачa чист уточненная", specified_feed);
            console.log("specified_cutdepth", specified_cutdepth);

            function typeofProcessing() {
              if (averagediameter >= 300) return 1;
              else {
                let boringkey = Object.keys(
                  dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing.boring
                )
                  .sort((a, b) => a - b)
                  .find((item) => Number(item) >= averagediameter);
                return dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofProcessing
                  .boring[boringkey];
              }
            }

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterMaterial[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][dataperehod.cuttingmaterial] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cutterGeometry[
                dataperehod.mainplanangle
              ] *
              typeofProcessing() *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            let cuttingspeed = 0;

            if (dataperehod.typelunet === "none") {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][dataperehod.mainplanangle][specified_cutdepth][specified_feed] *
                koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * averagediameter);

            console.log("коеф на чист скорость", koefficient_cuttingspeed);

            console.log("скорость рез чистовая", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            console.log("чистовое вспомагательное", trasitiontime);

            let cuttingin_overrun = 5;

            MainTime =
              Number(
                (
                  ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                  (rpm * specified_feed)
                ).toFixed(1)
              ) + Number(trasitiontime.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              cutdepth: cutdepth,
              trasitiontime: trasitiontime.toFixed(1),
              machintime: (
                ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          }
          break;
        //
        // ----------наружные канавки и отрезка------------------

        case "external_grooving":
          if (
            Object.keys(dataperehod).includes("impact_treatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("typecuttingmaterial") &&
            Object.keys(dataperehod).includes("diameter1") &&
            Object.keys(dataperehod).includes("diameter2") &&
            Object.keys(dataperehod).includes("controllength") &&
            Object.keys(dataperehod).includes("cutting_width") &&
            Object.keys(dataperehod).includes("width") &&
            Object.keys(dataperehod).includes("accuracy") &&
            dataperehod.availability_SOG &&
            dataperehod.typecuttingmaterial &&
            dataperehod.diameter1 &&
            dataperehod.diameter2 &&
            dataperehod.controllength &&
            dataperehod.cutting_width &&
            dataperehod.width &&
            dataperehod.accuracy &&
            dataperehod.diameter1 <= dataperehod.maxDiameter &&
            dataperehod.diameter2 <= dataperehod.maxDiameter &&
            dataperehod.cutting_width <= 40 &&
            dataperehod.controllength <= this.maxLength &&
            dataperehod.width <= this.maxLength
          ) {
            let diameter1 = Number(dataperehod.diameter1);
            let diameter2 = Number(dataperehod.diameter2);
            let averagediameter = (diameter1 + diameter2) / 2;
            let width = Number(dataperehod.width);
            let accuracy = dataperehod.accuracy;
            let controllength = Number(dataperehod.controllength);
            let cutting_width = Number(dataperehod.cutting_width);
            let numprohod = Math.ceil(width / cutting_width);
            let length = Math.abs(diameter1 - diameter2) / 2;

            let masparthardnes = this.parthardness.split("-");

            let specified_parthardness = Object.keys(
              dataTokarnovintorezn.feeds.external_grooving[this.partmaterial]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= masparthardnes[1]);

            let specified_cutting_width = Object.keys(
              dataTokarnovintorezn.feeds.external_grooving[this.partmaterial][
                specified_parthardness
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= cutting_width);

            let specified_length = Object.keys(
              dataTokarnovintorezn.feeds.external_grooving[this.partmaterial][
                specified_parthardness
              ][specified_cutting_width]
            )
              .sort((a, b) => +a - +b)
              .find((item) => item >= length + 5);

            let diam_ratio;
            if (diameter1 > diameter2) {
              diam_ratio = diameter2 / diameter1;
            } else {
              diam_ratio = diameter1 / diameter2;
            }
            let specified_diam_ratio = Object.keys(
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.diameters_ratio
            )
              .sort((a, b) => +a - +b)
              .find((item) => item >= diam_ratio);

            console.log("diam_ratio", diam_ratio);
            console.log("specified_diam_ratio", specified_diam_ratio);

            let feed = 0;
            if (dataperehod.typecuttingmaterial === "tvsplav") {
              feed =
                dataTokarnovintorezn.feeds.external_grooving[this.partmaterial][
                  specified_parthardness
                ][specified_cutting_width][specified_length];
            } else {
              feed =
                dataTokarnovintorezn.feeds.external_grooving[this.partmaterial][
                  specified_parthardness
                ][specified_cutting_width][specified_length] * 1.2;
            }

            console.log("Подача", feed);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ][dataperehod.typecuttingmaterial][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.diameters_ratio[
                specified_diam_ratio
              ] *
              (dataperehod.impact_treatment === "hit" ? 0.85 : 1);

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial][
                dataperehod.typecuttingmaterial
              ]
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("уточненная подача", specified_feed);

            let cuttingspeed = 0;

            if (
              (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
              dataperehod.typelunet === "none"
            ) {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial][
                  dataperehod.typecuttingmaterial
                ][specified_feed] * koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));

              if (dataperehod.typecentr === "gestk" && dataperehod.typelunet === "none") {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][specified_feed] * koefficient_cuttingspeed;
                let cuttingspeed_gestkcentr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                cuttingspeed =
                  +cuttingspeed_gestkcentr <= +cuttingspeed_patron
                    ? cuttingspeed_gestkcentr
                    : cuttingspeed_patron;
              } else if (
                (dataperehod.typecentr === "none" || dataperehod.typecentr === "vrash") &&
                dataperehod.typelunet !== "none"
              ) {
                let cuttingspeed_patron =
                  dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial][
                    dataperehod.typecuttingmaterial
                  ][specified_feed] * koefficient_cuttingspeed;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_lunet <= +cuttingspeed_patron
                    ? cuttingspeed_lunet
                    : cuttingspeed_patron;
              } else if (dataperehod.typecentr === "gestk" && dataperehod.typelunet !== "none") {
                let cuttingspeed_centr =
                  (dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typecentr[
                    dataperehod.typecentr
                  ][specified_permissibleSpeed_weight] *
                    3.14 *
                    averagediameter) /
                  1000;
                let cuttingspeed_lunet =
                  dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[
                    dataperehod.typelunet
                  ][specified_permissibleSpeed_weight];
                cuttingspeed =
                  +cuttingspeed_centr <= +cuttingspeed_lunet
                    ? cuttingspeed_centr
                    : cuttingspeed_lunet;
              }
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * averagediameter);

            console.log("коеф на скорость", koefficient_cuttingspeed);

            console.log("скорость рез ", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime_first_last =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_other =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(dataTokarnovintorezn.trasitionTime.crossturning[maxDobr]["0"][lobr])
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_full = 0;
            if (numprohod <= 2) {
              trasitiontime_full = numprohod * trasitiontime_first_last;
            } else {
              trasitiontime_full =
                trasitiontime_first_last * 2 + (numprohod - 2) * trasitiontime_other * 0.6;
            }

            console.log("вспомагательное", trasitiontime_full);

            let cuttingin_overrun = 5;

            let mashtime = 0;
            let feed_after_05R = "";

            if (diam_ratio < 0.5) {
              if (diameter1 > diameter2) {
                mashtime = Number(
                  ((diameter1 / 2) * 0.5 + cuttingin_overrun) / (rpm * specified_feed) +
                    ((diameter1 - diameter2) / 2 - (diameter1 / 2) * 0.5) /
                      (rpm * specified_feed * 0.6)
                ).toFixed(1);
                feed_after_05R = specified_feed * 0.6;
              } else {
                mashtime = Number(
                  ((diameter2 / 2) * 0.5 + cuttingin_overrun) / (rpm * specified_feed) +
                    ((diameter2 - diameter1) / 2 - (diameter2 / 2) * 0.5) /
                      (rpm * specified_feed * 0.6)
                ).toFixed(1);
                feed_after_05R = specified_feed * 0.6;
              }
            } else {
              mashtime = Number(
                (
                  (Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) /
                  (rpm * specified_feed)
                ).toFixed(1)
              );
            }

            MainTime = mashtime * numprohod + Number(trasitiontime_full.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              feed_after_05R: feed_after_05R,
              cuttingspeed: Math.floor(cuttingspeed),
              numprohod: numprohod,
              rpm: Math.floor(rpm),
              trasitiontime: trasitiontime_full.toFixed(1),
              machintime: mashtime * numprohod,
              maintime: MainTime,
            };

            return strrezults;
          }
          break;
        //
        // ---------------внутренние канавки--------------

        case "internal_grooving":
          if (
            Object.keys(dataperehod).includes("impact_treatment") &&
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("mandrel_section") &&
            Object.keys(dataperehod).includes("diameter1") &&
            Object.keys(dataperehod).includes("diameter2") &&
            Object.keys(dataperehod).includes("controllength") &&
            Object.keys(dataperehod).includes("cutting_width") &&
            Object.keys(dataperehod).includes("width") &&
            Object.keys(dataperehod).includes("accuracy") &&
            dataperehod.availability_SOG &&
            dataperehod.mandrel_section &&
            dataperehod.diameter1 &&
            dataperehod.diameter2 &&
            dataperehod.controllength &&
            dataperehod.cutting_width &&
            dataperehod.width &&
            dataperehod.accuracy &&
            dataperehod.diameter1 <= dataperehod.maxDiameter &&
            dataperehod.diameter2 <= dataperehod.maxDiameter &&
            dataperehod.controllength <= this.maxLength &&
            dataperehod.width <= this.maxLength &&
            dataperehod.cutting_width <= 20
          ) {
            let diameter1 = Number(dataperehod.diameter1);
            let diameter2 = Number(dataperehod.diameter2);
            let width = Number(dataperehod.width);
            let accuracy = dataperehod.accuracy;
            let controllength = Number(dataperehod.controllength);
            let cutting_width = Number(dataperehod.cutting_width);
            let mandrel_section = dataperehod.mandrel_section;
            let numprohod = Math.ceil(width / cutting_width);
            let averagediameter = Math.abs((diameter1 + diameter2) / 2);
            let length = Math.abs(diameter1 - diameter2) / 2;

            let specified_length = Object.keys(
              dataTokarnovintorezn.feeds.internal_grooving[this.partmaterial][mandrel_section]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= controllength);

            let specified_cutting_width = Object.keys(
              dataTokarnovintorezn.feeds.internal_grooving[this.partmaterial][mandrel_section][
                specified_length
              ]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= cutting_width);

            let feed =
              dataTokarnovintorezn.feeds.internal_grooving[this.partmaterial][mandrel_section][
                specified_length
              ][specified_cutting_width];

            let specified_feed = Object.keys(
              dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial].bistrorez
            )
              .sort((a, b) => a - b)
              .find(
                (item, ind, arr) =>
                  (Number(item) <= Number(feed) && Number(arr[ind + 1]) > Number(feed)) ||
                  (Number(item) <= Number(feed) && item == arr[arr.length - 1])
              );

            console.log("подачa чист расчетная", feed);
            console.log("подачa чист уточненная", specified_feed);

            let diam_ratio;
            if (diameter1 > diameter2) {
              diam_ratio = diameter2 / diameter1;
            } else {
              diam_ratio = diameter1 / diameter2;
            }
            let specified_diam_ratio = Object.keys(
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.diameters_ratio
            )
              .sort((a, b) => +a - +b)
              .find((item) => item >= diam_ratio);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ]["bistrorez"][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.typeofPart[this.typeofpart][
                this.typeofpart === "vtulka"
                  ? [1, 5, 15, 30].find((item) => item >= this.generallength / this.sd_factor)
                  : [10, 12, 15, 20, 30, 40].find(
                      (item) => item >= this.generallength / this.sd_factor
                    )
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.diameters_ratio[
                specified_diam_ratio
              ] *
              (dataperehod.impact_treatment === "hit" ? 0.85 : 1);

            let cuttingspeed = 0;

            if (dataperehod.typelunet === "none") {
              cuttingspeed =
                dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial].bistrorez[
                  specified_feed
                ] * koefficient_cuttingspeed;
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));
              let cuttingspeed_lunet =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
              let cuttingspeed_patron =
                dataTokarnovintorezn.cuttingSpeed.external_grooving[this.partmaterial].bistrorez[
                  specified_feed
                ] * koefficient_cuttingspeed;

              cuttingspeed =
                +cuttingspeed_lunet <= +cuttingspeed_patron
                  ? cuttingspeed_lunet
                  : cuttingspeed_patron;
            }

            let rpm = (1000 * cuttingspeed) / (3.14 * averagediameter);

            console.log("коеф на скорость", koefficient_cuttingspeed);

            console.log("скорость рез ", cuttingspeed);

            let maxDobr = [420, 900, 2000].find(
              (item) =>
                item >=
                dataTokarnovintorezn.machineModels[this.model].characteristics.part_maxD_patron
            );

            let lobr = Object.keys(
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime_first_last =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(
                  dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr]
                )
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_other =
              dataTokarnovintorezn.trasitionTime.crossturning[maxDobr][accuracy][lobr][
                Object.keys(dataTokarnovintorezn.trasitionTime.crossturning[maxDobr]["0"][lobr])
                  .sort((a, b) => a - b)
                  .find((item) => item >= controllength)
              ];

            let trasitiontime_full = 0;
            if (numprohod <= 2) {
              trasitiontime_full = numprohod * trasitiontime_first_last;
            } else {
              trasitiontime_full =
                trasitiontime_first_last * 2 + (numprohod - 2) * trasitiontime_other * 0.6;
            }

            console.log("вспомагательное", trasitiontime_full);

            let cuttingin_overrun = 5;

            MainTime =
              Number(
                (
                  ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                  (rpm * specified_feed)
                ).toFixed(1)
              ) + Number(trasitiontime_full.toFixed(1));

            let strrezults = {
              feed: specified_feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              numprohod: numprohod,
              trasitiontime: trasitiontime_full.toFixed(1),
              machintime: (
                ((Math.abs(diameter1 - diameter2) / 2 + cuttingin_overrun) * numprohod) /
                (rpm * specified_feed)
              ).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          }
          break;
        //
        // ---------------сверление--------------

        case "drilling":
          if (
            Object.keys(dataperehod).includes("availability_SOG") &&
            Object.keys(dataperehod).includes("diameter") &&
            Object.keys(dataperehod).includes("length") &&
            dataperehod.diameter &&
            dataperehod.length &&
            dataperehod.availability_SOG &&
            dataperehod.diameter <= 60 &&
            dataperehod.length <= this.maxLength
          ) {
            let diameter = Number(dataperehod.diameter);
            let length = Number(dataperehod.length);

            let specified_diameter = Object.keys(
              dataTokarnovintorezn.feeds.drilling[this.partmaterial]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= diameter);

            let koefficient_feed =
              dataTokarnovintorezn.correctionFactors.forFeeds.hardnessFactor[this.partmaterial][
                this.parthardness
              ];

            let feed = (
              dataTokarnovintorezn.feeds.drilling[this.partmaterial][specified_diameter] *
              koefficient_feed
            ).toFixed(1);

            console.log("подача", feed);

            let specified_ld_ratio = Object.keys(
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.drill_length
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length / diameter);

            let koefficient_cuttingspeed =
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[
                this.partmaterial
              ]["bistrorez"][this.part_gradematerial][this.parthardness] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.drill_length[
                specified_ld_ratio
              ] *
              dataTokarnovintorezn.correctionFactors.forCuttingSpeed.cooling[
                dataperehod.availability_SOG
              ];

            console.log("коеф скорости", koefficient_cuttingspeed);

            let cuttingspeed = 0;

            if (dataperehod.typelunet === "none") {
              cuttingspeed = (
                dataTokarnovintorezn.cuttingSpeed.drilling[this.partmaterial][specified_diameter] *
                koefficient_cuttingspeed
              ).toFixed(1);
            } else {
              let specified_permissibleSpeed_weight = [
                1000, 2000, 3000, 5000, 7000, 10000, 15000, 20000, 30000,
              ].find((item) => item > Number(this.partweight));
              let cuttingspeed_lunet =
                dataTokarnovintorezn.cuttingSpeed.permissibleSpeed.typelunet[dataperehod.typelunet][
                  specified_permissibleSpeed_weight
                ];
              let cuttingspeed_patron =
                dataTokarnovintorezn.cuttingSpeed.drilling[this.partmaterial][specified_diameter] *
                koefficient_cuttingspeed;

              cuttingspeed =
                +cuttingspeed_lunet <= +cuttingspeed_patron
                  ? cuttingspeed_lunet.toFixed(1)
                  : cuttingspeed_patron.toFixed(1);
            }

            console.log("скорость рез", cuttingspeed);

            let rpm = (1000 * cuttingspeed) / (3.14 * diameter);

            specified_diameter = Object.keys(
              dataTokarnovintorezn.trasitionTime.drilling[this.partmaterial]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= diameter);

            let specified_length = Object.keys(
              dataTokarnovintorezn.trasitionTime.drilling[this.partmaterial][specified_diameter]
            )
              .sort((a, b) => a - b)
              .find((item) => item >= length);

            let trasitiontime =
              dataTokarnovintorezn.trasitionTime.drilling[this.partmaterial][specified_diameter][
                specified_length
              ];

            console.log("всп время", trasitiontime);

            let cuttingin_overrun = 5;

            MainTime =
              Number((length / (rpm * feed)).toFixed(1)) + Number(trasitiontime.toFixed(1));

            let strrezults = {
              feed: feed,
              cuttingspeed: Math.floor(cuttingspeed),
              rpm: Math.floor(rpm),
              trasitiontime: trasitiontime.toFixed(1),
              machintime: (length / (rpm * feed)).toFixed(1),
              maintime: MainTime,
            };

            return strrezults;
          }
          break;

        default:
          return "другой вид обработки";
      }
    }
  },
};

// --------------------R E D U C E R ----------------------

export default function Tokarnovintorezn_reducer(state = tokarnovintorezn_defaultstate, action) {
  switch (action.type) {
    case "MODEL_TOKARNOVINTOREZN":
      if (!action.data)
        return { ...state, model: "", maxDiameter: "", maxLength: "", maxWeight: "" };
      else
        return {
          ...state,
          model: action.data,
          maxDiameterPatron:
            dataTokarnovintorezn.machineModels[action.data].characteristics.part_maxD_patron,
          maxDiameterCentra:
            dataTokarnovintorezn.machineModels[action.data].characteristics.part_maxD_centra,
          maxLength: dataTokarnovintorezn.machineModels[action.data].characteristics.part_maxL,
          maxWeightPatron:
            dataTokarnovintorezn.machineModels[action.data].characteristics.max_weight_patron,
          maxWeightCentra:
            dataTokarnovintorezn.machineModels[action.data].characteristics.max_weight_centra,
        };
    case "WEIGHT_TOKARNOVINTOREZN":
      let inpweight = action.data.replace(/[^.\d]+/g, "").replace(/^([^\.]*\.)|\./g, "$1");
      if (!action.data) return { ...state, partweight: inpweight, partweightstate: false };
      else return { ...state, partweight: inpweight, partweightstate: true };
    case "TYPEWORKPIECE_TOKARNOVINTOREZN":
      return { ...state, typeworkpiece: action.data };
    case "MATERIAL_TOKARNOVINTOREZN":
      return { ...state, partmaterial: action.data };
    case "HARDNESSMASSIV_TOKARNOVINTOREZN":
      return {
        ...state,
        hardnessmassiv: Object.keys(
          dataTokarnovintorezn.correctionFactors.forCuttingSpeed.hardnessFactor[state.partmaterial]
            .tvsplav[state.part_gradematerial]
        ),
      };
    // case "GENERAL_LENGTH_TOKARNOVINTOREZN":
    //   return { ...state, partlength: action.data };
    case "HARDNESS_TOKARNOVINTOREZN":
      return { ...state, parthardness: action.data };
    case "GRADE_MATERIAL_TOKARNOVINTOREZN":
      return { ...state, part_gradematerial: action.data };
    case "PARTFORM_TOKARNOVINTOREZN":
      return { ...state, partform: action.data };
    case "TYPEPART_TOKARNOVINTOREZN":
      return { ...state, typeofpart: action.data };
    case "GENERAL_LENGTH_TOKARNOVINTOREZN":
      let inpgenlength = action.data.replace(/[^.\d]+/g, "").replace(/^([^\.]*\.)|\./g, "$1");
      if (!action.data) return { ...state, generallength: inpgenlength, generallengthstate: false };
      else if (action.data && !state.sd_factor)
        return { ...state, generallength: inpgenlength, generallengthstate: true };
      else
        return {
          ...state,
          generallength: inpgenlength,
          generallengthstate: true,
          stiffness: inpgenlength / state.sd_factor,
        };
    case "SD_FACTOR":
      let inpsd_factor = action.data.replace(/[^.\d]+/g, "").replace(/^([^\.]*\.)|\./g, "$1");
      if (!action.data) return { ...state, sd_factor: inpsd_factor, sd_factorstate: false };
      else {
        if (state.generallength && action.data > 0) {
          return {
            ...state,
            sd_factor: inpsd_factor,
            sd_factorstate: true,
            stiffness: state.generallength / action.data,
          };
        } else if (state.generallength && action.data == 0) {
          return {
            ...state,
            sd_factor: inpsd_factor,
            sd_factorstate: true,
            stiffness: 100,
          };
        } else return { ...state, sd_factor: inpsd_factor, sd_factorstate: true };
      }

    // ----------------------------Переходы-------------------------

    case "ADDPEREHOD_TOKARNOVINTOREZN":
      if (!state.partweight) state.partweightstate = false;
      if (!state.model) state.modelstate = false;
      if (!state.numberparts) state.numberpartsstate = false;
      if (!state.generallength) state.generallengthstate = false;
      if (!state.sd_factor) state.sd_factorstate = false;
      if (
        state.partweight &&
        state.model &&
        state.numberparts &&
        state.generallength &&
        state.sd_factor
      ) {
        return {
          ...state,
          perehods: [...state.perehods, action.data],
        };
      }
    case "DELPEREHOD_TOKARNOVINTOREZN":
      return {
        ...state,
        perehods: state.perehods.filter((item, index) => {
          return !action.data.includes(String(index));
        }),
      };

    case "DATAVSPPEREHODA_TOKARNOVINTOREZN":
      return {
        ...state,
        perehods: state.perehods.map((item, index, arr) => {
          if (index == action.data[0]) {
            if (!item[1]) {
              return item.concat({ [action.data[1]]: action.data[2] });
            } else {
              return item.map((el, i, arr) => {
                if (i == 1) {
                  return {
                    ...arr[i],
                    ...{ [action.data[1]]: action.data[2] },
                  };
                } else return el;
              });
            }
          } else return item;
        }),
      };
    case "ADDSTRPEREHODA_TOKARNOVINTOREZN":
      return {
        ...state,
        perehods: state.perehods.map((item, index, arr) => {
          if (index == action.data[0]) {
            if (!item[1]) {
              return [...item, [action.data[1]]];
            } else {
              return item.map((el, i, arr) => {
                if (i == 1) {
                  return [...arr[i], action.data[1]];
                } else return el;
              });
            }
          } else return item;
        }),
      };
    case "DELSTRPEREHODA_TOKARNOVINTOREZN":
      return {
        ...state,
        perehods: state.perehods.map((item, index) => {
          if (index == action.data[0]) {
            return item.map((el, i, arr) => {
              if (i == 1) {
                return el.filter((it, ind) => !action.data[1].includes(String(ind)));
              } else return el;
            });
          } else return item;
        }),
      };
    case "DATAOSNPEREHODA_TOKARNOVINTOREZN":
      let dataosnper = "";
      if (
        action.data[1] == "diameter" ||
        action.data[1] == "length" ||
        action.data[1] == "allowance"
      ) {
        dataosnper = action.data[2].replace(/[^.\d]+/g, "").replace(/^([^\.]*\.)|\./g, "$1");
      } else dataosnper = action.data[2];
      return {
        ...state,
        perehods: state.perehods.map((item, index, arr) => {
          if (index == action.data[0]) {
            return item.map((item, index) => {
              if (index == 1) {
                return item.map((el, i, arr) => {
                  if (i == action.data[3]) {
                    return { ...arr[i], ...{ [action.data[1]]: dataosnper, Otime: 0 } };
                  } else return el;
                });
              } else return item;
            });
          } else return item;
        }),
      };

    case "CALCULATIONTIME_TOKARNOVINTOREZN": {
      return {
        ...state,
        perehods: state.perehods.map((item, index) => {
          if (item[0] == "Вспомагательный переход") {
            return item.map((el, i) => {
              if (
                i == 1 &&
                el.hasOwnProperty("installoption") &&
                el.hasOwnProperty("positionaccuracy")
              ) {
                if (el["installoption"] !== "" && el["positionaccuracy"] !== "") {
                  return { ...el, ...{ Vtime: state.get_Tokarnovintorezn_TimeInstall(index) } };
                } else {
                  return { ...el, ...{ Vtime: " " } };
                }
              } else return el;
            });
          } else {
            return item.map((el, i) => {
              if (i == 1) {
                return el.map((it, ind) => {
                  let calculationdata = state.get_Tokarnovintorezn_MainTime(index, ind);
                  if (calculationdata) {
                    return {
                      ...it,
                      ...{
                        Otime: calculationdata.maintime,
                        feed: calculationdata.feed,
                        feed_after_05R: calculationdata.feed_after_05R,
                        cuttingspeed: calculationdata.cuttingspeed,
                        rpm: calculationdata.rpm,
                        numprohod: calculationdata.numprohod,
                        cutdepth: calculationdata.cutdepth,
                        trasitiontime: calculationdata.trasitiontime,
                        machintime: calculationdata.machintime,
                        maintime: calculationdata.maintime,
                      },
                    };
                  } else
                    return {
                      ...it,
                      ...{
                        Otime: "",
                        feed: "",
                        feed_after_05R: "",
                        cuttingspeed: "",
                        rpm: "",
                        numprohod: "",
                        cutdepth: "",
                        trasitiontime: "",
                        machintime: "",
                        maintime: "",
                      },
                    };
                });
              } else return el;
            });
          }
        }),
      };
    }
    case "RELOAD_DATAOSNPEREHODA_TOKARNOVINTOREZN":
      return {
        ...state,
        perehods: state.perehods.map((item, index, arr) => {
          if (index == action.data) {
            return item.map((item, index) => {
              if (index == 1) {
                return item.map((el, i, arr) => {
                  return {
                    ...arr[i],
                    ...{
                      Otime: "",
                      feed: "",
                      feed_after_05R: "",
                      cuttingspeed: "",
                      rpm: "",
                      numprohod: "",
                      cutdepth: "",
                      trasitiontime: "",
                      machintime: "",
                      maintime: "",
                    },
                  };
                });
              } else return item;
            });
          } else return item;
        }),
      };

    default:
      return state;
  }
}
